// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: api/grpc/v1/gen/sso.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PermissionSvc_ListPermissions_FullMethodName  = "/gen.PermissionSvc/ListPermissions"
	PermissionSvc_GetPermission_FullMethodName    = "/gen.PermissionSvc/GetPermission"
	PermissionSvc_CreatePermission_FullMethodName = "/gen.PermissionSvc/CreatePermission"
	PermissionSvc_UpdatePermission_FullMethodName = "/gen.PermissionSvc/UpdatePermission"
	PermissionSvc_DeletePermission_FullMethodName = "/gen.PermissionSvc/DeletePermission"
)

// PermissionSvcClient is the client API for PermissionSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PermissionSvcClient interface {
	ListPermissions(ctx context.Context, in *SSO_ListReq, opts ...grpc.CallOption) (*SSO_PermissionList, error)
	GetPermission(ctx context.Context, in *SSO_Uint64Msg, opts ...grpc.CallOption) (*SSO_Permission, error)
	CreatePermission(ctx context.Context, in *SSO_Permission, opts ...grpc.CallOption) (*SSO_Uint64Msg, error)
	UpdatePermission(ctx context.Context, in *SSO_Permission, opts ...grpc.CallOption) (*SSO_Empty, error)
	DeletePermission(ctx context.Context, in *SSO_Uint64Msg, opts ...grpc.CallOption) (*SSO_Empty, error)
}

type permissionSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewPermissionSvcClient(cc grpc.ClientConnInterface) PermissionSvcClient {
	return &permissionSvcClient{cc}
}

func (c *permissionSvcClient) ListPermissions(ctx context.Context, in *SSO_ListReq, opts ...grpc.CallOption) (*SSO_PermissionList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SSO_PermissionList)
	err := c.cc.Invoke(ctx, PermissionSvc_ListPermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionSvcClient) GetPermission(ctx context.Context, in *SSO_Uint64Msg, opts ...grpc.CallOption) (*SSO_Permission, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SSO_Permission)
	err := c.cc.Invoke(ctx, PermissionSvc_GetPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionSvcClient) CreatePermission(ctx context.Context, in *SSO_Permission, opts ...grpc.CallOption) (*SSO_Uint64Msg, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SSO_Uint64Msg)
	err := c.cc.Invoke(ctx, PermissionSvc_CreatePermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionSvcClient) UpdatePermission(ctx context.Context, in *SSO_Permission, opts ...grpc.CallOption) (*SSO_Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SSO_Empty)
	err := c.cc.Invoke(ctx, PermissionSvc_UpdatePermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionSvcClient) DeletePermission(ctx context.Context, in *SSO_Uint64Msg, opts ...grpc.CallOption) (*SSO_Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SSO_Empty)
	err := c.cc.Invoke(ctx, PermissionSvc_DeletePermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PermissionSvcServer is the server API for PermissionSvc service.
// All implementations must embed UnimplementedPermissionSvcServer
// for forward compatibility.
type PermissionSvcServer interface {
	ListPermissions(context.Context, *SSO_ListReq) (*SSO_PermissionList, error)
	GetPermission(context.Context, *SSO_Uint64Msg) (*SSO_Permission, error)
	CreatePermission(context.Context, *SSO_Permission) (*SSO_Uint64Msg, error)
	UpdatePermission(context.Context, *SSO_Permission) (*SSO_Empty, error)
	DeletePermission(context.Context, *SSO_Uint64Msg) (*SSO_Empty, error)
	mustEmbedUnimplementedPermissionSvcServer()
}

// UnimplementedPermissionSvcServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPermissionSvcServer struct{}

func (UnimplementedPermissionSvcServer) ListPermissions(context.Context, *SSO_ListReq) (*SSO_PermissionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPermissions not implemented")
}
func (UnimplementedPermissionSvcServer) GetPermission(context.Context, *SSO_Uint64Msg) (*SSO_Permission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermission not implemented")
}
func (UnimplementedPermissionSvcServer) CreatePermission(context.Context, *SSO_Permission) (*SSO_Uint64Msg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePermission not implemented")
}
func (UnimplementedPermissionSvcServer) UpdatePermission(context.Context, *SSO_Permission) (*SSO_Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePermission not implemented")
}
func (UnimplementedPermissionSvcServer) DeletePermission(context.Context, *SSO_Uint64Msg) (*SSO_Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermission not implemented")
}
func (UnimplementedPermissionSvcServer) mustEmbedUnimplementedPermissionSvcServer() {}
func (UnimplementedPermissionSvcServer) testEmbeddedByValue()                       {}

// UnsafePermissionSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PermissionSvcServer will
// result in compilation errors.
type UnsafePermissionSvcServer interface {
	mustEmbedUnimplementedPermissionSvcServer()
}

func RegisterPermissionSvcServer(s grpc.ServiceRegistrar, srv PermissionSvcServer) {
	// If the following call pancis, it indicates UnimplementedPermissionSvcServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PermissionSvc_ServiceDesc, srv)
}

func _PermissionSvc_ListPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSO_ListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionSvcServer).ListPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionSvc_ListPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionSvcServer).ListPermissions(ctx, req.(*SSO_ListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionSvc_GetPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSO_Uint64Msg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionSvcServer).GetPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionSvc_GetPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionSvcServer).GetPermission(ctx, req.(*SSO_Uint64Msg))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionSvc_CreatePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSO_Permission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionSvcServer).CreatePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionSvc_CreatePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionSvcServer).CreatePermission(ctx, req.(*SSO_Permission))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionSvc_UpdatePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSO_Permission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionSvcServer).UpdatePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionSvc_UpdatePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionSvcServer).UpdatePermission(ctx, req.(*SSO_Permission))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionSvc_DeletePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSO_Uint64Msg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionSvcServer).DeletePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionSvc_DeletePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionSvcServer).DeletePermission(ctx, req.(*SSO_Uint64Msg))
	}
	return interceptor(ctx, in, info, handler)
}

// PermissionSvc_ServiceDesc is the grpc.ServiceDesc for PermissionSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PermissionSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gen.PermissionSvc",
	HandlerType: (*PermissionSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPermissions",
			Handler:    _PermissionSvc_ListPermissions_Handler,
		},
		{
			MethodName: "GetPermission",
			Handler:    _PermissionSvc_GetPermission_Handler,
		},
		{
			MethodName: "CreatePermission",
			Handler:    _PermissionSvc_CreatePermission_Handler,
		},
		{
			MethodName: "UpdatePermission",
			Handler:    _PermissionSvc_UpdatePermission_Handler,
		},
		{
			MethodName: "DeletePermission",
			Handler:    _PermissionSvc_DeletePermission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/grpc/v1/gen/sso.proto",
}

const (
	SSO_Authenticate_FullMethodName             = "/gen.SSO/Authenticate"
	SSO_ParseClaims_FullMethodName              = "/gen.SSO/ParseClaims"
	SSO_GetUserByToken_FullMethodName           = "/gen.SSO/GetUserByToken"
	SSO_SendLoginCode_FullMethodName            = "/gen.SSO/SendLoginCode"
	SSO_CheckLoginCode_FullMethodName           = "/gen.SSO/CheckLoginCode"
	SSO_Logout_FullMethodName                   = "/gen.SSO/Logout"
	SSO_Me_FullMethodName                       = "/gen.SSO/Me"
	SSO_UpdateMe_FullMethodName                 = "/gen.SSO/UpdateMe"
	SSO_CheckEmail_FullMethodName               = "/gen.SSO/CheckEmail"
	SSO_SendForgotPasswordEmail_FullMethodName  = "/gen.SSO/SendForgotPasswordEmail"
	SSO_CheckForgotPasswordEmail_FullMethodName = "/gen.SSO/CheckForgotPasswordEmail"
	SSO_SendSupportEmail_FullMethodName         = "/gen.SSO/SendSupportEmail"
)

// SSOClient is the client API for SSO service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SSOClient interface {
	Authenticate(ctx context.Context, in *SSO_EmailAndPasswordRequest, opts ...grpc.CallOption) (*SSO_EmailAndPasswordResponse, error)
	ParseClaims(ctx context.Context, in *SSO_StringMsg, opts ...grpc.CallOption) (*SSO_ParseClaimsRes, error)
	GetUserByToken(ctx context.Context, in *SSO_StringMsg, opts ...grpc.CallOption) (*SSO_User, error)
	SendLoginCode(ctx context.Context, in *SSO_SendLoginCodeReq, opts ...grpc.CallOption) (*SSO_Empty, error)
	CheckLoginCode(ctx context.Context, in *SSO_CheckLoginCodeReq, opts ...grpc.CallOption) (*SSO_CheckLoginCodeRes, error)
	Logout(ctx context.Context, in *SSO_Empty, opts ...grpc.CallOption) (*SSO_Empty, error)
	Me(ctx context.Context, in *SSO_Empty, opts ...grpc.CallOption) (*SSO_User, error)
	UpdateMe(ctx context.Context, in *SSO_User, opts ...grpc.CallOption) (*SSO_User, error)
	CheckEmail(ctx context.Context, in *SSO_EmailMsg, opts ...grpc.CallOption) (*SSO_CheckEmailRes, error)
	SendForgotPasswordEmail(ctx context.Context, in *SSO_EmailMsg, opts ...grpc.CallOption) (*SSO_Empty, error)
	CheckForgotPasswordEmail(ctx context.Context, in *SSO_CheckForgotPasswordEmailReq, opts ...grpc.CallOption) (*SSO_Empty, error)
	SendSupportEmail(ctx context.Context, in *SSO_SendSupportEmailReq, opts ...grpc.CallOption) (*SSO_Empty, error)
}

type sSOClient struct {
	cc grpc.ClientConnInterface
}

func NewSSOClient(cc grpc.ClientConnInterface) SSOClient {
	return &sSOClient{cc}
}

func (c *sSOClient) Authenticate(ctx context.Context, in *SSO_EmailAndPasswordRequest, opts ...grpc.CallOption) (*SSO_EmailAndPasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SSO_EmailAndPasswordResponse)
	err := c.cc.Invoke(ctx, SSO_Authenticate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOClient) ParseClaims(ctx context.Context, in *SSO_StringMsg, opts ...grpc.CallOption) (*SSO_ParseClaimsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SSO_ParseClaimsRes)
	err := c.cc.Invoke(ctx, SSO_ParseClaims_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOClient) GetUserByToken(ctx context.Context, in *SSO_StringMsg, opts ...grpc.CallOption) (*SSO_User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SSO_User)
	err := c.cc.Invoke(ctx, SSO_GetUserByToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOClient) SendLoginCode(ctx context.Context, in *SSO_SendLoginCodeReq, opts ...grpc.CallOption) (*SSO_Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SSO_Empty)
	err := c.cc.Invoke(ctx, SSO_SendLoginCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOClient) CheckLoginCode(ctx context.Context, in *SSO_CheckLoginCodeReq, opts ...grpc.CallOption) (*SSO_CheckLoginCodeRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SSO_CheckLoginCodeRes)
	err := c.cc.Invoke(ctx, SSO_CheckLoginCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOClient) Logout(ctx context.Context, in *SSO_Empty, opts ...grpc.CallOption) (*SSO_Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SSO_Empty)
	err := c.cc.Invoke(ctx, SSO_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOClient) Me(ctx context.Context, in *SSO_Empty, opts ...grpc.CallOption) (*SSO_User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SSO_User)
	err := c.cc.Invoke(ctx, SSO_Me_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOClient) UpdateMe(ctx context.Context, in *SSO_User, opts ...grpc.CallOption) (*SSO_User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SSO_User)
	err := c.cc.Invoke(ctx, SSO_UpdateMe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOClient) CheckEmail(ctx context.Context, in *SSO_EmailMsg, opts ...grpc.CallOption) (*SSO_CheckEmailRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SSO_CheckEmailRes)
	err := c.cc.Invoke(ctx, SSO_CheckEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOClient) SendForgotPasswordEmail(ctx context.Context, in *SSO_EmailMsg, opts ...grpc.CallOption) (*SSO_Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SSO_Empty)
	err := c.cc.Invoke(ctx, SSO_SendForgotPasswordEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOClient) CheckForgotPasswordEmail(ctx context.Context, in *SSO_CheckForgotPasswordEmailReq, opts ...grpc.CallOption) (*SSO_Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SSO_Empty)
	err := c.cc.Invoke(ctx, SSO_CheckForgotPasswordEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOClient) SendSupportEmail(ctx context.Context, in *SSO_SendSupportEmailReq, opts ...grpc.CallOption) (*SSO_Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SSO_Empty)
	err := c.cc.Invoke(ctx, SSO_SendSupportEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SSOServer is the server API for SSO service.
// All implementations must embed UnimplementedSSOServer
// for forward compatibility.
type SSOServer interface {
	Authenticate(context.Context, *SSO_EmailAndPasswordRequest) (*SSO_EmailAndPasswordResponse, error)
	ParseClaims(context.Context, *SSO_StringMsg) (*SSO_ParseClaimsRes, error)
	GetUserByToken(context.Context, *SSO_StringMsg) (*SSO_User, error)
	SendLoginCode(context.Context, *SSO_SendLoginCodeReq) (*SSO_Empty, error)
	CheckLoginCode(context.Context, *SSO_CheckLoginCodeReq) (*SSO_CheckLoginCodeRes, error)
	Logout(context.Context, *SSO_Empty) (*SSO_Empty, error)
	Me(context.Context, *SSO_Empty) (*SSO_User, error)
	UpdateMe(context.Context, *SSO_User) (*SSO_User, error)
	CheckEmail(context.Context, *SSO_EmailMsg) (*SSO_CheckEmailRes, error)
	SendForgotPasswordEmail(context.Context, *SSO_EmailMsg) (*SSO_Empty, error)
	CheckForgotPasswordEmail(context.Context, *SSO_CheckForgotPasswordEmailReq) (*SSO_Empty, error)
	SendSupportEmail(context.Context, *SSO_SendSupportEmailReq) (*SSO_Empty, error)
	mustEmbedUnimplementedSSOServer()
}

// UnimplementedSSOServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSSOServer struct{}

func (UnimplementedSSOServer) Authenticate(context.Context, *SSO_EmailAndPasswordRequest) (*SSO_EmailAndPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedSSOServer) ParseClaims(context.Context, *SSO_StringMsg) (*SSO_ParseClaimsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseClaims not implemented")
}
func (UnimplementedSSOServer) GetUserByToken(context.Context, *SSO_StringMsg) (*SSO_User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByToken not implemented")
}
func (UnimplementedSSOServer) SendLoginCode(context.Context, *SSO_SendLoginCodeReq) (*SSO_Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendLoginCode not implemented")
}
func (UnimplementedSSOServer) CheckLoginCode(context.Context, *SSO_CheckLoginCodeReq) (*SSO_CheckLoginCodeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckLoginCode not implemented")
}
func (UnimplementedSSOServer) Logout(context.Context, *SSO_Empty) (*SSO_Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedSSOServer) Me(context.Context, *SSO_Empty) (*SSO_User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Me not implemented")
}
func (UnimplementedSSOServer) UpdateMe(context.Context, *SSO_User) (*SSO_User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMe not implemented")
}
func (UnimplementedSSOServer) CheckEmail(context.Context, *SSO_EmailMsg) (*SSO_CheckEmailRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckEmail not implemented")
}
func (UnimplementedSSOServer) SendForgotPasswordEmail(context.Context, *SSO_EmailMsg) (*SSO_Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendForgotPasswordEmail not implemented")
}
func (UnimplementedSSOServer) CheckForgotPasswordEmail(context.Context, *SSO_CheckForgotPasswordEmailReq) (*SSO_Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckForgotPasswordEmail not implemented")
}
func (UnimplementedSSOServer) SendSupportEmail(context.Context, *SSO_SendSupportEmailReq) (*SSO_Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSupportEmail not implemented")
}
func (UnimplementedSSOServer) mustEmbedUnimplementedSSOServer() {}
func (UnimplementedSSOServer) testEmbeddedByValue()             {}

// UnsafeSSOServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SSOServer will
// result in compilation errors.
type UnsafeSSOServer interface {
	mustEmbedUnimplementedSSOServer()
}

func RegisterSSOServer(s grpc.ServiceRegistrar, srv SSOServer) {
	// If the following call pancis, it indicates UnimplementedSSOServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SSO_ServiceDesc, srv)
}

func _SSO_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSO_EmailAndPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSO_Authenticate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOServer).Authenticate(ctx, req.(*SSO_EmailAndPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSO_ParseClaims_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSO_StringMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOServer).ParseClaims(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSO_ParseClaims_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOServer).ParseClaims(ctx, req.(*SSO_StringMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSO_GetUserByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSO_StringMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOServer).GetUserByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSO_GetUserByToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOServer).GetUserByToken(ctx, req.(*SSO_StringMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSO_SendLoginCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSO_SendLoginCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOServer).SendLoginCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSO_SendLoginCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOServer).SendLoginCode(ctx, req.(*SSO_SendLoginCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSO_CheckLoginCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSO_CheckLoginCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOServer).CheckLoginCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSO_CheckLoginCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOServer).CheckLoginCode(ctx, req.(*SSO_CheckLoginCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSO_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSO_Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSO_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOServer).Logout(ctx, req.(*SSO_Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSO_Me_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSO_Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOServer).Me(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSO_Me_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOServer).Me(ctx, req.(*SSO_Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSO_UpdateMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSO_User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOServer).UpdateMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSO_UpdateMe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOServer).UpdateMe(ctx, req.(*SSO_User))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSO_CheckEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSO_EmailMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOServer).CheckEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSO_CheckEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOServer).CheckEmail(ctx, req.(*SSO_EmailMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSO_SendForgotPasswordEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSO_EmailMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOServer).SendForgotPasswordEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSO_SendForgotPasswordEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOServer).SendForgotPasswordEmail(ctx, req.(*SSO_EmailMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSO_CheckForgotPasswordEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSO_CheckForgotPasswordEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOServer).CheckForgotPasswordEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSO_CheckForgotPasswordEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOServer).CheckForgotPasswordEmail(ctx, req.(*SSO_CheckForgotPasswordEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSO_SendSupportEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSO_SendSupportEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOServer).SendSupportEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSO_SendSupportEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOServer).SendSupportEmail(ctx, req.(*SSO_SendSupportEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SSO_ServiceDesc is the grpc.ServiceDesc for SSO service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SSO_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gen.SSO",
	HandlerType: (*SSOServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _SSO_Authenticate_Handler,
		},
		{
			MethodName: "ParseClaims",
			Handler:    _SSO_ParseClaims_Handler,
		},
		{
			MethodName: "GetUserByToken",
			Handler:    _SSO_GetUserByToken_Handler,
		},
		{
			MethodName: "SendLoginCode",
			Handler:    _SSO_SendLoginCode_Handler,
		},
		{
			MethodName: "CheckLoginCode",
			Handler:    _SSO_CheckLoginCode_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _SSO_Logout_Handler,
		},
		{
			MethodName: "Me",
			Handler:    _SSO_Me_Handler,
		},
		{
			MethodName: "UpdateMe",
			Handler:    _SSO_UpdateMe_Handler,
		},
		{
			MethodName: "CheckEmail",
			Handler:    _SSO_CheckEmail_Handler,
		},
		{
			MethodName: "SendForgotPasswordEmail",
			Handler:    _SSO_SendForgotPasswordEmail_Handler,
		},
		{
			MethodName: "CheckForgotPasswordEmail",
			Handler:    _SSO_CheckForgotPasswordEmail_Handler,
		},
		{
			MethodName: "SendSupportEmail",
			Handler:    _SSO_SendSupportEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/grpc/v1/gen/sso.proto",
}

const (
	Users_SearchUser_FullMethodName = "/gen.Users/SearchUser"
	Users_ListUsers_FullMethodName  = "/gen.Users/ListUsers"
	Users_GetUser_FullMethodName    = "/gen.Users/GetUser"
	Users_CreateUser_FullMethodName = "/gen.Users/CreateUser"
	Users_UpdateUser_FullMethodName = "/gen.Users/UpdateUser"
	Users_DeleteUser_FullMethodName = "/gen.Users/DeleteUser"
)

// UsersClient is the client API for Users service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsersClient interface {
	SearchUser(ctx context.Context, in *SSO_SearchReq, opts ...grpc.CallOption) (*SSO_PaginatedUsersRes, error)
	ListUsers(ctx context.Context, in *SSO_ListReq, opts ...grpc.CallOption) (*SSO_PaginatedUsersRes, error)
	GetUser(ctx context.Context, in *SSO_UuidMsg, opts ...grpc.CallOption) (*SSO_User, error)
	CreateUser(ctx context.Context, in *SSO_CreateUserReq, opts ...grpc.CallOption) (*SSO_CreateUserRes, error)
	UpdateUser(ctx context.Context, in *SSO_UserWithUid, opts ...grpc.CallOption) (*SSO_UuidMsg, error)
	DeleteUser(ctx context.Context, in *SSO_UuidMsg, opts ...grpc.CallOption) (*SSO_Empty, error)
}

type usersClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersClient(cc grpc.ClientConnInterface) UsersClient {
	return &usersClient{cc}
}

func (c *usersClient) SearchUser(ctx context.Context, in *SSO_SearchReq, opts ...grpc.CallOption) (*SSO_PaginatedUsersRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SSO_PaginatedUsersRes)
	err := c.cc.Invoke(ctx, Users_SearchUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) ListUsers(ctx context.Context, in *SSO_ListReq, opts ...grpc.CallOption) (*SSO_PaginatedUsersRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SSO_PaginatedUsersRes)
	err := c.cc.Invoke(ctx, Users_ListUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetUser(ctx context.Context, in *SSO_UuidMsg, opts ...grpc.CallOption) (*SSO_User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SSO_User)
	err := c.cc.Invoke(ctx, Users_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) CreateUser(ctx context.Context, in *SSO_CreateUserReq, opts ...grpc.CallOption) (*SSO_CreateUserRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SSO_CreateUserRes)
	err := c.cc.Invoke(ctx, Users_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) UpdateUser(ctx context.Context, in *SSO_UserWithUid, opts ...grpc.CallOption) (*SSO_UuidMsg, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SSO_UuidMsg)
	err := c.cc.Invoke(ctx, Users_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) DeleteUser(ctx context.Context, in *SSO_UuidMsg, opts ...grpc.CallOption) (*SSO_Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SSO_Empty)
	err := c.cc.Invoke(ctx, Users_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersServer is the server API for Users service.
// All implementations must embed UnimplementedUsersServer
// for forward compatibility.
type UsersServer interface {
	SearchUser(context.Context, *SSO_SearchReq) (*SSO_PaginatedUsersRes, error)
	ListUsers(context.Context, *SSO_ListReq) (*SSO_PaginatedUsersRes, error)
	GetUser(context.Context, *SSO_UuidMsg) (*SSO_User, error)
	CreateUser(context.Context, *SSO_CreateUserReq) (*SSO_CreateUserRes, error)
	UpdateUser(context.Context, *SSO_UserWithUid) (*SSO_UuidMsg, error)
	DeleteUser(context.Context, *SSO_UuidMsg) (*SSO_Empty, error)
	mustEmbedUnimplementedUsersServer()
}

// UnimplementedUsersServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUsersServer struct{}

func (UnimplementedUsersServer) SearchUser(context.Context, *SSO_SearchReq) (*SSO_PaginatedUsersRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUser not implemented")
}
func (UnimplementedUsersServer) ListUsers(context.Context, *SSO_ListReq) (*SSO_PaginatedUsersRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedUsersServer) GetUser(context.Context, *SSO_UuidMsg) (*SSO_User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUsersServer) CreateUser(context.Context, *SSO_CreateUserReq) (*SSO_CreateUserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUsersServer) UpdateUser(context.Context, *SSO_UserWithUid) (*SSO_UuidMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUsersServer) DeleteUser(context.Context, *SSO_UuidMsg) (*SSO_Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUsersServer) mustEmbedUnimplementedUsersServer() {}
func (UnimplementedUsersServer) testEmbeddedByValue()               {}

// UnsafeUsersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersServer will
// result in compilation errors.
type UnsafeUsersServer interface {
	mustEmbedUnimplementedUsersServer()
}

func RegisterUsersServer(s grpc.ServiceRegistrar, srv UsersServer) {
	// If the following call pancis, it indicates UnimplementedUsersServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Users_ServiceDesc, srv)
}

func _Users_SearchUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSO_SearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).SearchUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_SearchUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).SearchUser(ctx, req.(*SSO_SearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSO_ListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_ListUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).ListUsers(ctx, req.(*SSO_ListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSO_UuidMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetUser(ctx, req.(*SSO_UuidMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSO_CreateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).CreateUser(ctx, req.(*SSO_CreateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSO_UserWithUid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).UpdateUser(ctx, req.(*SSO_UserWithUid))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSO_UuidMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).DeleteUser(ctx, req.(*SSO_UuidMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// Users_ServiceDesc is the grpc.ServiceDesc for Users service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Users_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gen.Users",
	HandlerType: (*UsersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchUser",
			Handler:    _Users_SearchUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _Users_ListUsers_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Users_GetUser_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _Users_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Users_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _Users_DeleteUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/grpc/v1/gen/sso.proto",
}
