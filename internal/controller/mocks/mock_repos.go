// Code generated by MockGen. DO NOT EDIT.
// Source: controller.go
//
// Generated by this command:
//
//	mockgen -source=controller.go -destination=mocks/mock_repos.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	model "github.com/JMURv/sso/pkg/model"
	utils "github.com/JMURv/sso/pkg/utils/http"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockAuth is a mock of Auth interface.
type MockAuth struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMockRecorder
}

// MockAuthMockRecorder is the mock recorder for MockAuth.
type MockAuthMockRecorder struct {
	mock *MockAuth
}

// NewMockAuth creates a new mock instance.
func NewMockAuth(ctrl *gomock.Controller) *MockAuth {
	mock := &MockAuth{ctrl: ctrl}
	mock.recorder = &MockAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuth) EXPECT() *MockAuthMockRecorder {
	return m.recorder
}

// NewToken mocks base method.
func (m *MockAuth) NewToken(u *model.User, d time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewToken", u, d)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewToken indicates an expected call of NewToken.
func (mr *MockAuthMockRecorder) NewToken(u, d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewToken", reflect.TypeOf((*MockAuth)(nil).NewToken), u, d)
}

// VerifyToken mocks base method.
func (m *MockAuth) VerifyToken(tokenStr string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", tokenStr)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyToken indicates an expected call of VerifyToken.
func (mr *MockAuthMockRecorder) VerifyToken(tokenStr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockAuth)(nil).VerifyToken), tokenStr)
}

// MockappRepo is a mock of appRepo interface.
type MockappRepo struct {
	ctrl     *gomock.Controller
	recorder *MockappRepoMockRecorder
}

// MockappRepoMockRecorder is the mock recorder for MockappRepo.
type MockappRepoMockRecorder struct {
	mock *MockappRepo
}

// NewMockappRepo creates a new mock instance.
func NewMockappRepo(ctrl *gomock.Controller) *MockappRepo {
	mock := &MockappRepo{ctrl: ctrl}
	mock.recorder = &MockappRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockappRepo) EXPECT() *MockappRepoMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockappRepo) CreateUser(ctx context.Context, u *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockappRepoMockRecorder) CreateUser(ctx, u any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockappRepo)(nil).CreateUser), ctx, u)
}

// DeleteUser mocks base method.
func (m *MockappRepo) DeleteUser(ctx context.Context, userID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockappRepoMockRecorder) DeleteUser(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockappRepo)(nil).DeleteUser), ctx, userID)
}

// GetUserByEmail mocks base method.
func (m *MockappRepo) GetUserByEmail(ctx context.Context, email string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockappRepoMockRecorder) GetUserByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockappRepo)(nil).GetUserByEmail), ctx, email)
}

// GetUserByID mocks base method.
func (m *MockappRepo) GetUserByID(ctx context.Context, userID uuid.UUID) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, userID)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockappRepoMockRecorder) GetUserByID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockappRepo)(nil).GetUserByID), ctx, userID)
}

// ListUsers mocks base method.
func (m *MockappRepo) ListUsers(ctx context.Context, page, size int) (*utils.PaginatedData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", ctx, page, size)
	ret0, _ := ret[0].(*utils.PaginatedData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockappRepoMockRecorder) ListUsers(ctx, page, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockappRepo)(nil).ListUsers), ctx, page, size)
}

// UpdateUser mocks base method.
func (m *MockappRepo) UpdateUser(ctx context.Context, userID uuid.UUID, newData *model.User) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, userID, newData)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockappRepoMockRecorder) UpdateUser(ctx, userID, newData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockappRepo)(nil).UpdateUser), ctx, userID, newData)
}

// UserSearch mocks base method.
func (m *MockappRepo) UserSearch(ctx context.Context, query string, page, size int) (*utils.PaginatedData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserSearch", ctx, query, page, size)
	ret0, _ := ret[0].(*utils.PaginatedData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserSearch indicates an expected call of UserSearch.
func (mr *MockappRepoMockRecorder) UserSearch(ctx, query, page, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserSearch", reflect.TypeOf((*MockappRepo)(nil).UserSearch), ctx, query, page, size)
}

// MockCacheRepo is a mock of CacheRepo interface.
type MockCacheRepo struct {
	ctrl     *gomock.Controller
	recorder *MockCacheRepoMockRecorder
}

// MockCacheRepoMockRecorder is the mock recorder for MockCacheRepo.
type MockCacheRepoMockRecorder struct {
	mock *MockCacheRepo
}

// NewMockCacheRepo creates a new mock instance.
func NewMockCacheRepo(ctrl *gomock.Controller) *MockCacheRepo {
	mock := &MockCacheRepo{ctrl: ctrl}
	mock.recorder = &MockCacheRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheRepo) EXPECT() *MockCacheRepoMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockCacheRepo) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockCacheRepoMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCacheRepo)(nil).Close))
}

// Delete mocks base method.
func (m *MockCacheRepo) Delete(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCacheRepoMockRecorder) Delete(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCacheRepo)(nil).Delete), ctx, key)
}

// GetCode mocks base method.
func (m *MockCacheRepo) GetCode(ctx context.Context, key string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCode", ctx, key)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCode indicates an expected call of GetCode.
func (mr *MockCacheRepoMockRecorder) GetCode(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCode", reflect.TypeOf((*MockCacheRepo)(nil).GetCode), ctx, key)
}

// GetToStruct mocks base method.
func (m *MockCacheRepo) GetToStruct(ctx context.Context, key string, dest any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToStruct", ctx, key, dest)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetToStruct indicates an expected call of GetToStruct.
func (mr *MockCacheRepoMockRecorder) GetToStruct(ctx, key, dest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToStruct", reflect.TypeOf((*MockCacheRepo)(nil).GetToStruct), ctx, key, dest)
}

// InvalidateKeysByPattern mocks base method.
func (m *MockCacheRepo) InvalidateKeysByPattern(ctx context.Context, pattern string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateKeysByPattern", ctx, pattern)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvalidateKeysByPattern indicates an expected call of InvalidateKeysByPattern.
func (mr *MockCacheRepoMockRecorder) InvalidateKeysByPattern(ctx, pattern any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateKeysByPattern", reflect.TypeOf((*MockCacheRepo)(nil).InvalidateKeysByPattern), ctx, pattern)
}

// Set mocks base method.
func (m *MockCacheRepo) Set(ctx context.Context, t time.Duration, key string, val any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, t, key, val)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockCacheRepoMockRecorder) Set(ctx, t, key, val any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCacheRepo)(nil).Set), ctx, t, key, val)
}

// MockSMTPRepo is a mock of SMTPRepo interface.
type MockSMTPRepo struct {
	ctrl     *gomock.Controller
	recorder *MockSMTPRepoMockRecorder
}

// MockSMTPRepoMockRecorder is the mock recorder for MockSMTPRepo.
type MockSMTPRepoMockRecorder struct {
	mock *MockSMTPRepo
}

// NewMockSMTPRepo creates a new mock instance.
func NewMockSMTPRepo(ctrl *gomock.Controller) *MockSMTPRepo {
	mock := &MockSMTPRepo{ctrl: ctrl}
	mock.recorder = &MockSMTPRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSMTPRepo) EXPECT() *MockSMTPRepoMockRecorder {
	return m.recorder
}

// SendForgotPasswordEmail mocks base method.
func (m *MockSMTPRepo) SendForgotPasswordEmail(ctx context.Context, token, uid64, toEmail string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendForgotPasswordEmail", ctx, token, uid64, toEmail)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendForgotPasswordEmail indicates an expected call of SendForgotPasswordEmail.
func (mr *MockSMTPRepoMockRecorder) SendForgotPasswordEmail(ctx, token, uid64, toEmail any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendForgotPasswordEmail", reflect.TypeOf((*MockSMTPRepo)(nil).SendForgotPasswordEmail), ctx, token, uid64, toEmail)
}

// SendLoginEmail mocks base method.
func (m *MockSMTPRepo) SendLoginEmail(ctx context.Context, code int, toEmail string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendLoginEmail", ctx, code, toEmail)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendLoginEmail indicates an expected call of SendLoginEmail.
func (mr *MockSMTPRepoMockRecorder) SendLoginEmail(ctx, code, toEmail any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendLoginEmail", reflect.TypeOf((*MockSMTPRepo)(nil).SendLoginEmail), ctx, code, toEmail)
}

// SendOptFile mocks base method.
func (m *MockSMTPRepo) SendOptFile(arg0 context.Context, email, filename string, bytes []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendOptFile", arg0, email, filename, bytes)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendOptFile indicates an expected call of SendOptFile.
func (mr *MockSMTPRepoMockRecorder) SendOptFile(arg0, email, filename, bytes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOptFile", reflect.TypeOf((*MockSMTPRepo)(nil).SendOptFile), arg0, email, filename, bytes)
}

// SendSupportEmail mocks base method.
func (m *MockSMTPRepo) SendSupportEmail(ctx context.Context, u *model.User, theme, text string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSupportEmail", ctx, u, theme, text)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendSupportEmail indicates an expected call of SendSupportEmail.
func (mr *MockSMTPRepoMockRecorder) SendSupportEmail(ctx, u, theme, text any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSupportEmail", reflect.TypeOf((*MockSMTPRepo)(nil).SendSupportEmail), ctx, u, theme, text)
}

// SendUserCredentials mocks base method.
func (m *MockSMTPRepo) SendUserCredentials(arg0 context.Context, email, pass string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendUserCredentials", arg0, email, pass)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendUserCredentials indicates an expected call of SendUserCredentials.
func (mr *MockSMTPRepoMockRecorder) SendUserCredentials(arg0, email, pass any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendUserCredentials", reflect.TypeOf((*MockSMTPRepo)(nil).SendUserCredentials), arg0, email, pass)
}
