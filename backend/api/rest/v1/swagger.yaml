definitions:
  big.Int:
    type: object
  github_com_JMURv_sso_internal_auth.Claims:
    properties:
      aud:
        description: the `aud` (Audience) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.3
        items:
          type: string
        type: array
      exp:
        allOf:
        - $ref: '#/definitions/jwt.NumericDate'
        description: the `exp` (Expiration Time) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.4
      iat:
        allOf:
        - $ref: '#/definitions/jwt.NumericDate'
        description: the `iat` (Issued At) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.6
      iss:
        description: the `iss` (Issuer) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.1
        type: string
      jti:
        description: the `jti` (JWT ID) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.7
        type: string
      nbf:
        allOf:
        - $ref: '#/definitions/jwt.NumericDate'
        description: the `nbf` (Not Before) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.5
      roles:
        items:
          $ref: '#/definitions/github_com_JMURv_sso_internal_models.Role'
        type: array
      sub:
        description: the `sub` (Subject) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.2
        type: string
      uid:
        type: string
    type: object
  github_com_JMURv_sso_internal_dto.CheckEmailRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  github_com_JMURv_sso_internal_dto.CheckForgotPasswordEmailRequest:
    properties:
      password:
        type: string
      token:
        type: integer
      uidb64:
        type: string
    required:
    - password
    - token
    - uidb64
    type: object
  github_com_JMURv_sso_internal_dto.CheckLoginCodeRequest:
    properties:
      code:
        type: integer
      email:
        type: string
    required:
    - code
    - email
    type: object
  github_com_JMURv_sso_internal_dto.CreatePermissionRequest:
    properties:
      description:
        type: string
      name:
        type: string
    required:
    - name
    type: object
  github_com_JMURv_sso_internal_dto.CreateRoleRequest:
    properties:
      description:
        type: string
      name:
        type: string
      permissions:
        items:
          type: integer
        type: array
    required:
    - name
    type: object
  github_com_JMURv_sso_internal_dto.CreateUserResponse:
    properties:
      id:
        type: string
    type: object
  github_com_JMURv_sso_internal_dto.EmailAndPasswordRequest:
    properties:
      email:
        type: string
      password:
        type: string
      token:
        type: string
    required:
    - email
    - password
    - token
    type: object
  github_com_JMURv_sso_internal_dto.ExistsUserResponse:
    properties:
      exists:
        type: boolean
    type: object
  github_com_JMURv_sso_internal_dto.LoginCodeRequest:
    properties:
      email:
        type: string
      password:
        type: string
      token:
        type: string
    required:
    - email
    - password
    - token
    type: object
  github_com_JMURv_sso_internal_dto.LoginStartRequest:
    properties:
      email:
        type: string
      token:
        type: string
    required:
    - email
    - token
    type: object
  github_com_JMURv_sso_internal_dto.PaginatedPermissionResponse:
    properties:
      count:
        type: integer
      current_page:
        type: integer
      data:
        items:
          $ref: '#/definitions/github_com_JMURv_sso_internal_models.Permission'
        type: array
      has_next_page:
        type: boolean
      total_pages:
        type: integer
    type: object
  github_com_JMURv_sso_internal_dto.PaginatedRoleResponse:
    properties:
      count:
        type: integer
      current_page:
        type: integer
      data:
        items:
          $ref: '#/definitions/github_com_JMURv_sso_internal_models.Role'
        type: array
      has_next_page:
        type: boolean
      total_pages:
        type: integer
    type: object
  github_com_JMURv_sso_internal_dto.PaginatedUserResponse:
    properties:
      count:
        type: integer
      current_page:
        type: integer
      data:
        items:
          $ref: '#/definitions/github_com_JMURv_sso_internal_models.User'
        type: array
      has_next_page:
        type: boolean
      total_pages:
        type: integer
    type: object
  github_com_JMURv_sso_internal_dto.RefreshRequest:
    properties:
      refresh:
        type: string
    required:
    - refresh
    type: object
  github_com_JMURv_sso_internal_dto.SendForgotPasswordEmail:
    properties:
      email:
        type: string
      token:
        type: string
    required:
    - email
    - token
    type: object
  github_com_JMURv_sso_internal_dto.TokenPair:
    properties:
      access:
        type: string
      refresh:
        type: string
    type: object
  github_com_JMURv_sso_internal_dto.TokenRequest:
    properties:
      token:
        type: string
    required:
    - token
    type: object
  github_com_JMURv_sso_internal_dto.UpdateDeviceRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  github_com_JMURv_sso_internal_dto.UpdatePermissionRequest:
    properties:
      description:
        type: string
      name:
        type: string
    required:
    - name
    type: object
  github_com_JMURv_sso_internal_dto.UpdateRoleRequest:
    properties:
      description:
        type: string
      name:
        type: string
      permissions:
        items:
          type: integer
        type: array
    required:
    - name
    type: object
  github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse:
    properties:
      errors:
        items:
          type: string
        type: array
    type: object
  github_com_JMURv_sso_internal_models.Device:
    properties:
      browser:
        type: string
      created_at:
        type: string
      device_type:
        type: string
      id:
        type: string
      ip:
        type: string
      last_active:
        type: string
      name:
        type: string
      os:
        type: string
      ua:
        type: string
      user_id:
        type: string
    type: object
  github_com_JMURv_sso_internal_models.Oauth2Connection:
    properties:
      access_token:
        type: string
      created_at:
        type: string
      expires_at:
        type: string
      id:
        type: integer
      id_token:
        type: string
      provider:
        type: string
      provider_id:
        type: string
      refresh_token:
        type: string
      user_id:
        type: string
    type: object
  github_com_JMURv_sso_internal_models.Permission:
    properties:
      description:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  github_com_JMURv_sso_internal_models.Role:
    properties:
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      permissions:
        items:
          $ref: '#/definitions/github_com_JMURv_sso_internal_models.Permission'
        type: array
    type: object
  github_com_JMURv_sso_internal_models.User:
    properties:
      avatar:
        type: string
      created_at:
        type: string
      devices:
        items:
          $ref: '#/definitions/github_com_JMURv_sso_internal_models.Device'
        type: array
      email:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      is_email_verified:
        type: boolean
      is_wa:
        type: boolean
      name:
        type: string
      oauth2_connections:
        items:
          $ref: '#/definitions/github_com_JMURv_sso_internal_models.Oauth2Connection'
        type: array
      password:
        type: string
      roles:
        items:
          $ref: '#/definitions/github_com_JMURv_sso_internal_models.Role'
        type: array
      updated_at:
        type: string
    type: object
  http.Header:
    additionalProperties:
      items:
        type: string
      type: array
    type: object
  http.Request:
    properties:
      body:
        description: |-
          Body is the request's body.

          For client requests, a nil body means the request has no
          body, such as a GET request. The HTTP Client's Transport
          is responsible for calling the Close method.

          For server requests, the Request Body is always non-nil
          but will return EOF immediately when no body is present.
          The Server will close the request body. The ServeHTTP
          Handler does not need to.

          Body must allow Read to be called concurrently with Close.
          In particular, calling Close should unblock a Read waiting
          for input.
      cancel:
        description: |-
          Cancel is an optional channel whose closure indicates that the client
          request should be regarded as canceled. Not all implementations of
          RoundTripper may support Cancel.

          For server requests, this field is not applicable.

          Deprecated: Set the Request's context with NewRequestWithContext
          instead. If a Request's Cancel field and context are both
          set, it is undefined whether Cancel is respected.
        type: object
      close:
        description: |-
          Close indicates whether to close the connection after
          replying to this request (for servers) or after sending this
          request and reading its response (for clients).

          For server requests, the HTTP server handles this automatically
          and this field is not needed by Handlers.

          For client requests, setting this field prevents re-use of
          TCP connections between requests to the same hosts, as if
          Transport.DisableKeepAlives were set.
        type: boolean
      contentLength:
        description: |-
          ContentLength records the length of the associated content.
          The value -1 indicates that the length is unknown.
          Values >= 0 indicate that the given number of bytes may
          be read from Body.

          For client requests, a value of 0 with a non-nil Body is
          also treated as unknown.
        type: integer
      form:
        allOf:
        - $ref: '#/definitions/url.Values'
        description: |-
          Form contains the parsed form data, including both the URL
          field's query parameters and the PATCH, POST, or PUT form data.
          This field is only available after ParseForm is called.
          The HTTP client ignores Form and uses Body instead.
      header:
        allOf:
        - $ref: '#/definitions/http.Header'
        description: "Header contains the request header fields either received\nby
          the server or to be sent by the client.\n\nIf a server received a request
          with header lines,\n\n\tHost: example.com\n\taccept-encoding: gzip, deflate\n\tAccept-Language:
          en-us\n\tfOO: Bar\n\tfoo: two\n\nthen\n\n\tHeader = map[string][]string{\n\t\t\"Accept-Encoding\":
          {\"gzip, deflate\"},\n\t\t\"Accept-Language\": {\"en-us\"},\n\t\t\"Foo\":
          {\"Bar\", \"two\"},\n\t}\n\nFor incoming requests, the Host header is promoted
          to the\nRequest.Host field and removed from the Header map.\n\nHTTP defines
          that header names are case-insensitive. The\nrequest parser implements this
          by using CanonicalHeaderKey,\nmaking the first character and any characters
          following a\nhyphen uppercase and the rest lowercase.\n\nFor client requests,
          certain headers such as Content-Length\nand Connection are automatically
          written when needed and\nvalues in Header may be ignored. See the documentation\nfor
          the Request.Write method."
      host:
        description: |-
          For server requests, Host specifies the host on which the
          URL is sought. For HTTP/1 (per RFC 7230, section 5.4), this
          is either the value of the "Host" header or the host name
          given in the URL itself. For HTTP/2, it is the value of the
          ":authority" pseudo-header field.
          It may be of the form "host:port". For international domain
          names, Host may be in Punycode or Unicode form. Use
          golang.org/x/net/idna to convert it to either format if
          needed.
          To prevent DNS rebinding attacks, server Handlers should
          validate that the Host header has a value for which the
          Handler considers itself authoritative. The included
          ServeMux supports patterns registered to particular host
          names and thus protects its registered Handlers.

          For client requests, Host optionally overrides the Host
          header to send. If empty, the Request.Write method uses
          the value of URL.Host. Host may contain an international
          domain name.
        type: string
      method:
        description: |-
          Method specifies the HTTP method (GET, POST, PUT, etc.).
          For client requests, an empty string means GET.
        type: string
      multipartForm:
        allOf:
        - $ref: '#/definitions/multipart.Form'
        description: |-
          MultipartForm is the parsed multipart form, including file uploads.
          This field is only available after ParseMultipartForm is called.
          The HTTP client ignores MultipartForm and uses Body instead.
      pattern:
        description: |-
          Pattern is the [ServeMux] pattern that matched the request.
          It is empty if the request was not matched against a pattern.
        type: string
      postForm:
        allOf:
        - $ref: '#/definitions/url.Values'
        description: |-
          PostForm contains the parsed form data from PATCH, POST
          or PUT body parameters.

          This field is only available after ParseForm is called.
          The HTTP client ignores PostForm and uses Body instead.
      proto:
        description: |-
          The protocol version for incoming server requests.

          For client requests, these fields are ignored. The HTTP
          client code always uses either HTTP/1.1 or HTTP/2.
          See the docs on Transport for details.
        type: string
      protoMajor:
        description: "1"
        type: integer
      protoMinor:
        description: "0"
        type: integer
      remoteAddr:
        description: |-
          RemoteAddr allows HTTP servers and other software to record
          the network address that sent the request, usually for
          logging. This field is not filled in by ReadRequest and
          has no defined format. The HTTP server in this package
          sets RemoteAddr to an "IP:port" address before invoking a
          handler.
          This field is ignored by the HTTP client.
        type: string
      requestURI:
        description: |-
          RequestURI is the unmodified request-target of the
          Request-Line (RFC 7230, Section 3.1.1) as sent by the client
          to a server. Usually the URL field should be used instead.
          It is an error to set this field in an HTTP client request.
        type: string
      response:
        allOf:
        - $ref: '#/definitions/http.Response'
        description: |-
          Response is the redirect response which caused this request
          to be created. This field is only populated during client
          redirects.
      tls:
        allOf:
        - $ref: '#/definitions/tls.ConnectionState'
        description: |-
          TLS allows HTTP servers and other software to record
          information about the TLS connection on which the request
          was received. This field is not filled in by ReadRequest.
          The HTTP server in this package sets the field for
          TLS-enabled connections before invoking a handler;
          otherwise it leaves the field nil.
          This field is ignored by the HTTP client.
      trailer:
        allOf:
        - $ref: '#/definitions/http.Header'
        description: |-
          Trailer specifies additional headers that are sent after the request
          body.

          For server requests, the Trailer map initially contains only the
          trailer keys, with nil values. (The client declares which trailers it
          will later send.)  While the handler is reading from Body, it must
          not reference Trailer. After reading from Body returns EOF, Trailer
          can be read again and will contain non-nil values, if they were sent
          by the client.

          For client requests, Trailer must be initialized to a map containing
          the trailer keys to later send. The values may be nil or their final
          values. The ContentLength must be 0 or -1, to send a chunked request.
          After the HTTP request is sent the map values can be updated while
          the request body is read. Once the body returns EOF, the caller must
          not mutate Trailer.

          Few HTTP clients, servers, or proxies support HTTP trailers.
      transferEncoding:
        description: |-
          TransferEncoding lists the transfer encodings from outermost to
          innermost. An empty list denotes the "identity" encoding.
          TransferEncoding can usually be ignored; chunked encoding is
          automatically added and removed as necessary when sending and
          receiving requests.
        items:
          type: string
        type: array
      url:
        allOf:
        - $ref: '#/definitions/url.URL'
        description: |-
          URL specifies either the URI being requested (for server
          requests) or the URL to access (for client requests).

          For server requests, the URL is parsed from the URI
          supplied on the Request-Line as stored in RequestURI.  For
          most requests, fields other than Path and RawQuery will be
          empty. (See RFC 7230, Section 5.3)

          For client requests, the URL's Host specifies the server to
          connect to, while the Request's Host field optionally
          specifies the Host header value to send in the HTTP
          request.
    type: object
  http.Response:
    properties:
      body:
        description: |-
          Body represents the response body.

          The response body is streamed on demand as the Body field
          is read. If the network connection fails or the server
          terminates the response, Body.Read calls return an error.

          The http Client and Transport guarantee that Body is always
          non-nil, even on responses without a body or responses with
          a zero-length body. It is the caller's responsibility to
          close Body. The default HTTP client's Transport may not
          reuse HTTP/1.x "keep-alive" TCP connections if the Body is
          not read to completion and closed.

          The Body is automatically dechunked if the server replied
          with a "chunked" Transfer-Encoding.

          As of Go 1.12, the Body will also implement io.Writer
          on a successful "101 Switching Protocols" response,
          as used by WebSockets and HTTP/2's "h2c" mode.
      close:
        description: |-
          Close records whether the header directed that the connection be
          closed after reading Body. The value is advice for clients: neither
          ReadResponse nor Response.Write ever closes a connection.
        type: boolean
      contentLength:
        description: |-
          ContentLength records the length of the associated content. The
          value -1 indicates that the length is unknown. Unless Request.Method
          is "HEAD", values >= 0 indicate that the given number of bytes may
          be read from Body.
        type: integer
      header:
        allOf:
        - $ref: '#/definitions/http.Header'
        description: |-
          Header maps header keys to values. If the response had multiple
          headers with the same key, they may be concatenated, with comma
          delimiters.  (RFC 7230, section 3.2.2 requires that multiple headers
          be semantically equivalent to a comma-delimited sequence.) When
          Header values are duplicated by other fields in this struct (e.g.,
          ContentLength, TransferEncoding, Trailer), the field values are
          authoritative.

          Keys in the map are canonicalized (see CanonicalHeaderKey).
      proto:
        description: e.g. "HTTP/1.0"
        type: string
      protoMajor:
        description: e.g. 1
        type: integer
      protoMinor:
        description: e.g. 0
        type: integer
      request:
        allOf:
        - $ref: '#/definitions/http.Request'
        description: |-
          Request is the request that was sent to obtain this Response.
          Request's Body is nil (having already been consumed).
          This is only populated for Client requests.
      status:
        description: e.g. "200 OK"
        type: string
      statusCode:
        description: e.g. 200
        type: integer
      tls:
        allOf:
        - $ref: '#/definitions/tls.ConnectionState'
        description: |-
          TLS contains information about the TLS connection on which the
          response was received. It is nil for unencrypted responses.
          The pointer is shared between responses and should not be
          modified.
      trailer:
        allOf:
        - $ref: '#/definitions/http.Header'
        description: |-
          Trailer maps trailer keys to values in the same
          format as Header.

          The Trailer initially contains only nil values, one for
          each key specified in the server's "Trailer" header
          value. Those values are not added to Header.

          Trailer must not be accessed concurrently with Read calls
          on the Body.

          After Body.Read has returned io.EOF, Trailer will contain
          any trailer values sent by the server.
      transferEncoding:
        description: |-
          Contains transfer encodings from outer-most to inner-most. Value is
          nil, means that "identity" encoding is used.
        items:
          type: string
        type: array
      uncompressed:
        description: |-
          Uncompressed reports whether the response was sent compressed but
          was decompressed by the http package. When true, reading from
          Body yields the uncompressed content instead of the compressed
          content actually set from the server, ContentLength is set to -1,
          and the "Content-Length" and "Content-Encoding" fields are deleted
          from the responseHeader. To get the original response from
          the server, set Transport.DisableCompression to true.
        type: boolean
    type: object
  jwt.NumericDate:
    properties:
      time.Time:
        type: string
    type: object
  multipart.FileHeader:
    properties:
      filename:
        type: string
      header:
        $ref: '#/definitions/textproto.MIMEHeader'
      size:
        type: integer
    type: object
  multipart.Form:
    properties:
      file:
        additionalProperties:
          items:
            $ref: '#/definitions/multipart.FileHeader'
          type: array
        type: object
      value:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
    type: object
  net.IPNet:
    properties:
      ip:
        description: network number
        items:
          type: integer
        type: array
      mask:
        description: network mask
        items:
          type: integer
        type: array
    type: object
  pkix.AttributeTypeAndValue:
    properties:
      type:
        items:
          type: integer
        type: array
      value: {}
    type: object
  pkix.Extension:
    properties:
      critical:
        type: boolean
      id:
        items:
          type: integer
        type: array
      value:
        items:
          type: integer
        type: array
    type: object
  pkix.Name:
    properties:
      commonName:
        type: string
      country:
        items:
          type: string
        type: array
      extraNames:
        description: |-
          ExtraNames contains attributes to be copied, raw, into any marshaled
          distinguished names. Values override any attributes with the same OID.
          The ExtraNames field is not populated when parsing, see Names.
        items:
          $ref: '#/definitions/pkix.AttributeTypeAndValue'
        type: array
      locality:
        items:
          type: string
        type: array
      names:
        description: |-
          Names contains all parsed attributes. When parsing distinguished names,
          this can be used to extract non-standard attributes that are not parsed
          by this package. When marshaling to RDNSequences, the Names field is
          ignored, see ExtraNames.
        items:
          $ref: '#/definitions/pkix.AttributeTypeAndValue'
        type: array
      organization:
        items:
          type: string
        type: array
      organizationalUnit:
        items:
          type: string
        type: array
      postalCode:
        items:
          type: string
        type: array
      province:
        items:
          type: string
        type: array
      serialNumber:
        type: string
      streetAddress:
        items:
          type: string
        type: array
    type: object
  protocol.AttestationFormat:
    enum:
    - packed
    - tpm
    - android-key
    - android-safetynet
    - fido-u2f
    - apple
    - none
    type: string
    x-enum-varnames:
    - AttestationFormatPacked
    - AttestationFormatTPM
    - AttestationFormatAndroidKey
    - AttestationFormatAndroidSafetyNet
    - AttestationFormatFIDOUniversalSecondFactor
    - AttestationFormatApple
    - AttestationFormatNone
  protocol.AuthenticationExtensions:
    additionalProperties: {}
    type: object
  protocol.AuthenticatorAttachment:
    enum:
    - platform
    - cross-platform
    type: string
    x-enum-varnames:
    - Platform
    - CrossPlatform
  protocol.AuthenticatorSelection:
    properties:
      authenticatorAttachment:
        allOf:
        - $ref: '#/definitions/protocol.AuthenticatorAttachment'
        description: |-
          AuthenticatorAttachment If this member is present, eligible authenticators are filtered to only
          authenticators attached with the specified AuthenticatorAttachment enum.
      requireResidentKey:
        description: |-
          RequireResidentKey this member describes the Relying Party's requirements regarding resident
          credentials. If the parameter is set to true, the authenticator MUST create a client-side-resident
          public key credential source when creating a public key credential.
        type: boolean
      residentKey:
        allOf:
        - $ref: '#/definitions/protocol.ResidentKeyRequirement'
        description: |-
          ResidentKey this member describes the Relying Party's requirements regarding resident
          credentials per Webauthn Level 2.
      userVerification:
        allOf:
        - $ref: '#/definitions/protocol.UserVerificationRequirement'
        description: |-
          UserVerification This member describes the Relying Party's requirements regarding user verification for
          the create() operation. Eligible authenticators are filtered to only those capable of satisfying this
          requirement.
    type: object
  protocol.AuthenticatorTransport:
    enum:
    - usb
    - nfc
    - ble
    - smart-card
    - hybrid
    - internal
    type: string
    x-enum-varnames:
    - USB
    - NFC
    - BLE
    - SmartCard
    - Hybrid
    - Internal
  protocol.ConveyancePreference:
    enum:
    - none
    - indirect
    - direct
    - enterprise
    type: string
    x-enum-varnames:
    - PreferNoAttestation
    - PreferIndirectAttestation
    - PreferDirectAttestation
    - PreferEnterpriseAttestation
  protocol.CredentialAssertion:
    properties:
      mediation:
        $ref: '#/definitions/protocol.CredentialMediationRequirement'
      publicKey:
        $ref: '#/definitions/protocol.PublicKeyCredentialRequestOptions'
    type: object
  protocol.CredentialCreation:
    properties:
      mediation:
        $ref: '#/definitions/protocol.CredentialMediationRequirement'
      publicKey:
        $ref: '#/definitions/protocol.PublicKeyCredentialCreationOptions'
    type: object
  protocol.CredentialDescriptor:
    properties:
      id:
        description: CredentialID The ID of a credential to allow/disallow.
        items:
          type: integer
        type: array
      transports:
        description: The authenticator transports that can be used.
        items:
          $ref: '#/definitions/protocol.AuthenticatorTransport'
        type: array
      type:
        allOf:
        - $ref: '#/definitions/protocol.CredentialType'
        description: The valid credential types.
    type: object
  protocol.CredentialMediationRequirement:
    enum:
    - silent
    - optional
    - conditional
    - required
    type: string
    x-enum-varnames:
    - MediationSilent
    - MediationOptional
    - MediationConditional
    - MediationRequired
  protocol.CredentialParameter:
    properties:
      alg:
        $ref: '#/definitions/webauthncose.COSEAlgorithmIdentifier'
      type:
        $ref: '#/definitions/protocol.CredentialType'
    type: object
  protocol.CredentialType:
    enum:
    - public-key
    type: string
    x-enum-varnames:
    - PublicKeyCredentialType
  protocol.PublicKeyCredentialCreationOptions:
    properties:
      attestation:
        $ref: '#/definitions/protocol.ConveyancePreference'
      attestationFormats:
        items:
          $ref: '#/definitions/protocol.AttestationFormat'
        type: array
      authenticatorSelection:
        $ref: '#/definitions/protocol.AuthenticatorSelection'
      challenge:
        items:
          type: integer
        type: array
      excludeCredentials:
        items:
          $ref: '#/definitions/protocol.CredentialDescriptor'
        type: array
      extensions:
        $ref: '#/definitions/protocol.AuthenticationExtensions'
      hints:
        items:
          $ref: '#/definitions/protocol.PublicKeyCredentialHints'
        type: array
      pubKeyCredParams:
        items:
          $ref: '#/definitions/protocol.CredentialParameter'
        type: array
      rp:
        $ref: '#/definitions/protocol.RelyingPartyEntity'
      timeout:
        type: integer
      user:
        $ref: '#/definitions/protocol.UserEntity'
    type: object
  protocol.PublicKeyCredentialHints:
    enum:
    - security-key
    - client-device
    - hybrid
    type: string
    x-enum-varnames:
    - PublicKeyCredentialHintSecurityKey
    - PublicKeyCredentialHintClientDevice
    - PublicKeyCredentialHintHybrid
  protocol.PublicKeyCredentialRequestOptions:
    properties:
      allowCredentials:
        items:
          $ref: '#/definitions/protocol.CredentialDescriptor'
        type: array
      challenge:
        items:
          type: integer
        type: array
      extensions:
        $ref: '#/definitions/protocol.AuthenticationExtensions'
      hints:
        items:
          $ref: '#/definitions/protocol.PublicKeyCredentialHints'
        type: array
      rpId:
        type: string
      timeout:
        type: integer
      userVerification:
        $ref: '#/definitions/protocol.UserVerificationRequirement'
    type: object
  protocol.RelyingPartyEntity:
    properties:
      id:
        description: A unique identifier for the Relying Party entity, which sets
          the RP ID.
        type: string
      name:
        description: |-
          A human-palatable name for the entity. Its function depends on what the PublicKeyCredentialEntity represents:

          When inherited by PublicKeyCredentialRpEntity it is a human-palatable identifier for the Relying Party,
          intended only for display. For example, "ACME Corporation", "Wonderful Widgets, Inc." or "ОАО Примертех".

          When inherited by PublicKeyCredentialUserEntity, it is a human-palatable identifier for a user account. It is
          intended only for display, i.e., aiding the user in determining the difference between user accounts with similar
          displayNames. For example, "alexm", "alex.p.mueller@example.com" or "+14255551234".
        type: string
    type: object
  protocol.ResidentKeyRequirement:
    enum:
    - discouraged
    - preferred
    - required
    type: string
    x-enum-varnames:
    - ResidentKeyRequirementDiscouraged
    - ResidentKeyRequirementPreferred
    - ResidentKeyRequirementRequired
  protocol.UserEntity:
    properties:
      displayName:
        description: |-
          A human-palatable name for the user account, intended only for display.
          For example, "Alex P. Müller" or "田中 倫". The Relying Party SHOULD let
          the user choose this, and SHOULD NOT restrict the choice more than necessary.
        type: string
      id:
        description: |-
          ID is the user handle of the user account entity. To ensure secure operation,
          authentication and authorization decisions MUST be made on the basis of this id
          member, not the displayName nor name members. See Section 6.1 of
          [RFC8266](https://www.w3.org/TR/webauthn/#biblio-rfc8266).
      name:
        description: |-
          A human-palatable name for the entity. Its function depends on what the PublicKeyCredentialEntity represents:

          When inherited by PublicKeyCredentialRpEntity it is a human-palatable identifier for the Relying Party,
          intended only for display. For example, "ACME Corporation", "Wonderful Widgets, Inc." or "ОАО Примертех".

          When inherited by PublicKeyCredentialUserEntity, it is a human-palatable identifier for a user account. It is
          intended only for display, i.e., aiding the user in determining the difference between user accounts with similar
          displayNames. For example, "alexm", "alex.p.mueller@example.com" or "+14255551234".
        type: string
    type: object
  protocol.UserVerificationRequirement:
    enum:
    - required
    - preferred
    - discouraged
    type: string
    x-enum-comments:
      VerificationPreferred: This is the default
    x-enum-varnames:
    - VerificationRequired
    - VerificationPreferred
    - VerificationDiscouraged
  textproto.MIMEHeader:
    additionalProperties:
      items:
        type: string
      type: array
    type: object
  tls.ConnectionState:
    properties:
      cipherSuite:
        description: |-
          CipherSuite is the cipher suite negotiated for the connection (e.g.
          TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256, TLS_AES_128_GCM_SHA256).
        type: integer
      didResume:
        description: |-
          DidResume is true if this connection was successfully resumed from a
          previous session with a session ticket or similar mechanism.
        type: boolean
      echaccepted:
        description: |-
          ECHAccepted indicates if Encrypted Client Hello was offered by the client
          and accepted by the server. Currently, ECH is supported only on the
          client side.
        type: boolean
      handshakeComplete:
        description: HandshakeComplete is true if the handshake has concluded.
        type: boolean
      negotiatedProtocol:
        description: NegotiatedProtocol is the application protocol negotiated with
          ALPN.
        type: string
      negotiatedProtocolIsMutual:
        description: |-
          NegotiatedProtocolIsMutual used to indicate a mutual NPN negotiation.

          Deprecated: this value is always true.
        type: boolean
      ocspresponse:
        description: |-
          OCSPResponse is a stapled Online Certificate Status Protocol (OCSP)
          response provided by the peer for the leaf certificate, if any.
        items:
          type: integer
        type: array
      peerCertificates:
        description: |-
          PeerCertificates are the parsed certificates sent by the peer, in the
          order in which they were sent. The first element is the leaf certificate
          that the connection is verified against.

          On the client side, it can't be empty. On the server side, it can be
          empty if Config.ClientAuth is not RequireAnyClientCert or
          RequireAndVerifyClientCert.

          PeerCertificates and its contents should not be modified.
        items:
          $ref: '#/definitions/x509.Certificate'
        type: array
      serverName:
        description: |-
          ServerName is the value of the Server Name Indication extension sent by
          the client. It's available both on the server and on the client side.
        type: string
      signedCertificateTimestamps:
        description: |-
          SignedCertificateTimestamps is a list of SCTs provided by the peer
          through the TLS handshake for the leaf certificate, if any.
        items:
          items:
            type: integer
          type: array
        type: array
      tlsunique:
        description: |-
          TLSUnique contains the "tls-unique" channel binding value (see RFC 5929,
          Section 3). This value will be nil for TLS 1.3 connections and for
          resumed connections that don't support Extended Master Secret (RFC 7627).
        items:
          type: integer
        type: array
      verifiedChains:
        description: |-
          VerifiedChains is a list of one or more chains where the first element is
          PeerCertificates[0] and the last element is from Config.RootCAs (on the
          client side) or Config.ClientCAs (on the server side).

          On the client side, it's set if Config.InsecureSkipVerify is false. On
          the server side, it's set if Config.ClientAuth is VerifyClientCertIfGiven
          (and the peer provided a certificate) or RequireAndVerifyClientCert.

          VerifiedChains and its contents should not be modified.
        items:
          items:
            $ref: '#/definitions/x509.Certificate'
          type: array
        type: array
      version:
        description: Version is the TLS version used by the connection (e.g. VersionTLS12).
        type: integer
    type: object
  url.URL:
    properties:
      forceQuery:
        description: append a query ('?') even if RawQuery is empty
        type: boolean
      fragment:
        description: fragment for references, without '#'
        type: string
      host:
        description: host or host:port (see Hostname and Port methods)
        type: string
      omitHost:
        description: do not emit empty host (authority)
        type: boolean
      opaque:
        description: encoded opaque data
        type: string
      path:
        description: path (relative paths may omit leading slash)
        type: string
      rawFragment:
        description: encoded fragment hint (see EscapedFragment method)
        type: string
      rawPath:
        description: encoded path hint (see EscapedPath method)
        type: string
      rawQuery:
        description: encoded query values, without '?'
        type: string
      scheme:
        type: string
      user:
        allOf:
        - $ref: '#/definitions/url.Userinfo'
        description: username and password information
    type: object
  url.Userinfo:
    type: object
  url.Values:
    additionalProperties:
      items:
        type: string
      type: array
    type: object
  webauthncose.COSEAlgorithmIdentifier:
    enum:
    - -7
    - -8
    - -35
    - -36
    - -37
    - -38
    - -39
    - -47
    - -257
    - -258
    - -259
    - -65535
    type: integer
    x-enum-varnames:
    - AlgES256
    - AlgEdDSA
    - AlgES384
    - AlgES512
    - AlgPS256
    - AlgPS384
    - AlgPS512
    - AlgES256K
    - AlgRS256
    - AlgRS384
    - AlgRS512
    - AlgRS1
  x509.Certificate:
    properties:
      authorityKeyId:
        items:
          type: integer
        type: array
      basicConstraintsValid:
        description: |-
          BasicConstraintsValid indicates whether IsCA, MaxPathLen,
          and MaxPathLenZero are valid.
        type: boolean
      crldistributionPoints:
        description: CRL Distribution Points
        items:
          type: string
        type: array
      dnsnames:
        description: |-
          Subject Alternate Name values. (Note that these values may not be valid
          if invalid values were contained within a parsed certificate. For
          example, an element of DNSNames may not be a valid DNS domain name.)
        items:
          type: string
        type: array
      emailAddresses:
        items:
          type: string
        type: array
      excludedDNSDomains:
        items:
          type: string
        type: array
      excludedEmailAddresses:
        items:
          type: string
        type: array
      excludedIPRanges:
        items:
          $ref: '#/definitions/net.IPNet'
        type: array
      excludedURIDomains:
        items:
          type: string
        type: array
      extKeyUsage:
        description: Sequence of extended key usages.
        items:
          $ref: '#/definitions/x509.ExtKeyUsage'
        type: array
      extensions:
        description: |-
          Extensions contains raw X.509 extensions. When parsing certificates,
          this can be used to extract non-critical extensions that are not
          parsed by this package. When marshaling certificates, the Extensions
          field is ignored, see ExtraExtensions.
        items:
          $ref: '#/definitions/pkix.Extension'
        type: array
      extraExtensions:
        description: |-
          ExtraExtensions contains extensions to be copied, raw, into any
          marshaled certificates. Values override any extensions that would
          otherwise be produced based on the other fields. The ExtraExtensions
          field is not populated when parsing certificates, see Extensions.
        items:
          $ref: '#/definitions/pkix.Extension'
        type: array
      ipaddresses:
        items:
          items:
            type: integer
          type: array
        type: array
      isCA:
        type: boolean
      issuer:
        $ref: '#/definitions/pkix.Name'
      issuingCertificateURL:
        items:
          type: string
        type: array
      keyUsage:
        $ref: '#/definitions/x509.KeyUsage'
      maxPathLen:
        description: |-
          MaxPathLen and MaxPathLenZero indicate the presence and
          value of the BasicConstraints' "pathLenConstraint".

          When parsing a certificate, a positive non-zero MaxPathLen
          means that the field was specified, -1 means it was unset,
          and MaxPathLenZero being true mean that the field was
          explicitly set to zero. The case of MaxPathLen==0 with MaxPathLenZero==false
          should be treated equivalent to -1 (unset).

          When generating a certificate, an unset pathLenConstraint
          can be requested with either MaxPathLen == -1 or using the
          zero value for both MaxPathLen and MaxPathLenZero.
        type: integer
      maxPathLenZero:
        description: |-
          MaxPathLenZero indicates that BasicConstraintsValid==true
          and MaxPathLen==0 should be interpreted as an actual
          maximum path length of zero. Otherwise, that combination is
          interpreted as MaxPathLen not being set.
        type: boolean
      notAfter:
        description: Validity bounds.
        type: string
      notBefore:
        description: Validity bounds.
        type: string
      ocspserver:
        description: RFC 5280, 4.2.2.1 (Authority Information Access)
        items:
          type: string
        type: array
      permittedDNSDomains:
        items:
          type: string
        type: array
      permittedDNSDomainsCritical:
        description: Name constraints
        type: boolean
      permittedEmailAddresses:
        items:
          type: string
        type: array
      permittedIPRanges:
        items:
          $ref: '#/definitions/net.IPNet'
        type: array
      permittedURIDomains:
        items:
          type: string
        type: array
      policies:
        description: |-
          Policies contains all policy identifiers included in the certificate.
          In Go 1.22, encoding/gob cannot handle and ignores this field.
        items:
          $ref: '#/definitions/x509.OID'
        type: array
      policyIdentifiers:
        description: |-
          PolicyIdentifiers contains asn1.ObjectIdentifiers, the components
          of which are limited to int32. If a certificate contains a policy which
          cannot be represented by asn1.ObjectIdentifier, it will not be included in
          PolicyIdentifiers, but will be present in Policies, which contains all parsed
          policy OIDs.
        items:
          items:
            type: integer
          type: array
        type: array
      publicKey: {}
      publicKeyAlgorithm:
        $ref: '#/definitions/x509.PublicKeyAlgorithm'
      raw:
        description: Complete ASN.1 DER content (certificate, signature algorithm
          and signature).
        items:
          type: integer
        type: array
      rawIssuer:
        description: DER encoded Issuer
        items:
          type: integer
        type: array
      rawSubject:
        description: DER encoded Subject
        items:
          type: integer
        type: array
      rawSubjectPublicKeyInfo:
        description: DER encoded SubjectPublicKeyInfo.
        items:
          type: integer
        type: array
      rawTBSCertificate:
        description: Certificate part of raw ASN.1 DER content.
        items:
          type: integer
        type: array
      serialNumber:
        $ref: '#/definitions/big.Int'
      signature:
        items:
          type: integer
        type: array
      signatureAlgorithm:
        $ref: '#/definitions/x509.SignatureAlgorithm'
      subject:
        $ref: '#/definitions/pkix.Name'
      subjectKeyId:
        items:
          type: integer
        type: array
      unhandledCriticalExtensions:
        description: |-
          UnhandledCriticalExtensions contains a list of extension IDs that
          were not (fully) processed when parsing. Verify will fail if this
          slice is non-empty, unless verification is delegated to an OS
          library which understands all the critical extensions.

          Users can access these extensions using Extensions and can remove
          elements from this slice if they believe that they have been
          handled.
        items:
          items:
            type: integer
          type: array
        type: array
      unknownExtKeyUsage:
        description: Encountered extended key usages unknown to this package.
        items:
          items:
            type: integer
          type: array
        type: array
      uris:
        items:
          $ref: '#/definitions/url.URL'
        type: array
      version:
        type: integer
    type: object
  x509.ExtKeyUsage:
    enum:
    - 0
    - 1
    - 2
    - 3
    - 4
    - 5
    - 6
    - 7
    - 8
    - 9
    - 10
    - 11
    - 12
    - 13
    type: integer
    x-enum-varnames:
    - ExtKeyUsageAny
    - ExtKeyUsageServerAuth
    - ExtKeyUsageClientAuth
    - ExtKeyUsageCodeSigning
    - ExtKeyUsageEmailProtection
    - ExtKeyUsageIPSECEndSystem
    - ExtKeyUsageIPSECTunnel
    - ExtKeyUsageIPSECUser
    - ExtKeyUsageTimeStamping
    - ExtKeyUsageOCSPSigning
    - ExtKeyUsageMicrosoftServerGatedCrypto
    - ExtKeyUsageNetscapeServerGatedCrypto
    - ExtKeyUsageMicrosoftCommercialCodeSigning
    - ExtKeyUsageMicrosoftKernelCodeSigning
  x509.KeyUsage:
    enum:
    - 1
    - 2
    - 4
    - 8
    - 16
    - 32
    - 64
    - 128
    - 256
    type: integer
    x-enum-varnames:
    - KeyUsageDigitalSignature
    - KeyUsageContentCommitment
    - KeyUsageKeyEncipherment
    - KeyUsageDataEncipherment
    - KeyUsageKeyAgreement
    - KeyUsageCertSign
    - KeyUsageCRLSign
    - KeyUsageEncipherOnly
    - KeyUsageDecipherOnly
  x509.OID:
    type: object
  x509.PublicKeyAlgorithm:
    enum:
    - 0
    - 1
    - 2
    - 3
    - 4
    type: integer
    x-enum-comments:
      DSA: Only supported for parsing.
    x-enum-varnames:
    - UnknownPublicKeyAlgorithm
    - RSA
    - DSA
    - ECDSA
    - Ed25519
  x509.SignatureAlgorithm:
    enum:
    - 0
    - 1
    - 2
    - 3
    - 4
    - 5
    - 6
    - 7
    - 8
    - 9
    - 10
    - 11
    - 12
    - 13
    - 14
    - 15
    - 16
    type: integer
    x-enum-comments:
      DSAWithSHA1: Unsupported.
      DSAWithSHA256: Unsupported.
      ECDSAWithSHA1: Only supported for signing, and verification of CRLs, CSRs, and
        OCSP responses.
      MD2WithRSA: Unsupported.
      MD5WithRSA: Only supported for signing, not verification.
      SHA1WithRSA: Only supported for signing, and verification of CRLs, CSRs, and
        OCSP responses.
    x-enum-varnames:
    - UnknownSignatureAlgorithm
    - MD2WithRSA
    - MD5WithRSA
    - SHA1WithRSA
    - SHA256WithRSA
    - SHA384WithRSA
    - SHA512WithRSA
    - DSAWithSHA1
    - DSAWithSHA256
    - ECDSAWithSHA1
    - ECDSAWithSHA256
    - ECDSAWithSHA384
    - ECDSAWithSHA512
    - SHA256WithRSAPSS
    - SHA384WithRSAPSS
    - SHA512WithRSAPSS
    - PureEd25519
info:
  contact: {}
paths:
  /auth/email/check:
    post:
      consumes:
      - application/json
      description: Exchange a valid email code for JWT tokens
      parameters:
      - description: Client real IP address
        in: header
        name: X-Real-IP
        required: true
        type: string
      - description: Client User-Agent
        in: header
        name: User-Agent
        required: true
        type: string
      - description: code, reCAPTCHA token
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/github_com_JMURv_sso_internal_dto.CheckLoginCodeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_dto.TokenPair'
        "400":
          description: missing device info or bad payload
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "404":
          description: code not found
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
      summary: Check email login code
      tags:
      - EmailAuth
  /auth/email/send:
    post:
      consumes:
      - application/json
      description: Verify reCAPTCHA, then send a one-time code to the user’s email.
        May return tokens if password also valid.
      parameters:
      - description: Client real IP address
        in: header
        name: X-Real-IP
        required: true
        type: string
      - description: Client User-Agent
        in: header
        name: User-Agent
        required: true
        type: string
      - description: email, password, reCAPTCHA token
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/github_com_JMURv_sso_internal_dto.LoginCodeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_dto.TokenPair'
        "400":
          description: missing device info or bad payload
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "401":
          description: invalid credentials or reCAPTCHA
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
      summary: Send login code via email
      tags:
      - EmailAuth
  /auth/jwt:
    post:
      consumes:
      - application/json
      description: Verify reCAPTCHA, then authenticate and set JWT cookies
      parameters:
      - description: Client real IP address
        in: header
        name: X-Real-IP
        required: true
        type: string
      - description: Client User-Agent
        in: header
        name: User-Agent
        required: true
        type: string
      - description: email, password, reCAPTCHA token
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/github_com_JMURv_sso_internal_dto.EmailAndPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_dto.TokenPair'
        "400":
          description: missing device info or bad payload
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "401":
          description: invalid credentials or reCAPTCHA
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "404":
          description: user not found
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
      summary: Authenticate using email & password
      tags:
      - Authentication
  /auth/jwt/parse:
    post:
      consumes:
      - application/json
      description: Decode a token without requiring device header
      parameters:
      - description: jwt token
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/github_com_JMURv_sso_internal_dto.TokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_auth.Claims'
        "404":
          description: token not found
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
      summary: Parse JWT claims
      tags:
      - Authentication
  /auth/jwt/refresh:
    post:
      consumes:
      - application/json
      description: Validate device header and refresh tokens, reset cookies
      parameters:
      - description: Client real IP address
        in: header
        name: X-Real-IP
        required: true
        type: string
      - description: Client User-Agent
        in: header
        name: User-Agent
        required: true
        type: string
      - description: refresh_token
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/github_com_JMURv_sso_internal_dto.RefreshRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_dto.TokenPair'
        "400":
          description: missing device info or bad payload
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "401":
          description: token revoked or invalid
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "404":
          description: session not found
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
      summary: Refresh JWT tokens
      tags:
      - Authentication
  /auth/logout:
    post:
      description: Revoke refresh token, clear JWT cookies
      parameters:
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "404":
          description: session not found
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
      summary: Logout user
      tags:
      - Authentication
  /auth/oauth2/{provider}/callback:
    get:
      consumes:
      - application/json
      description: Processes provider callback, exchanges code, sets authentication
        cookies, and redirects to success URL
      parameters:
      - description: OAuth2 provider identifier
        in: path
        name: provider
        required: true
        type: string
      - description: Authorization code returned by provider
        in: query
        name: code
        required: true
        type: string
      - description: State parameter for CSRF mitigation
        in: query
        name: state
        required: true
        type: string
      - description: Client real IP address
        in: header
        name: X-Real-IP
        required: true
        type: string
      - description: Client User-Agent
        in: header
        name: User-Agent
        required: true
        type: string
      produces:
      - application/json
      responses:
        "307":
          description: Redirect to success URL
        "400":
          description: invalid request or missing device info
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "404":
          description: provider not supported or resource not found
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
      summary: Handle OAuth2 provider callback
      tags:
      - OAuth2
  /auth/oauth2/{provider}/start:
    get:
      consumes:
      - application/json
      description: Redirects user to the OAuth2 provider's authorization URL
      parameters:
      - description: OAuth2 provider identifier
        in: path
        name: provider
        required: true
        type: string
      produces:
      - application/json
      responses:
        "307":
          description: Redirect to provider auth URL
        "400":
          description: invalid provider
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
      summary: Start OAuth2 authentication flow
      tags:
      - OAuth2
  /auth/oidc/{provider}/callback:
    get:
      consumes:
      - application/json
      description: Processes provider callback, exchanges code, sets authentication
        cookies, and redirects to success URL
      parameters:
      - description: OIDC provider identifier
        in: path
        name: provider
        required: true
        type: string
      - description: Authorization code returned by provider
        in: query
        name: code
        required: true
        type: string
      - description: State parameter for CSRF mitigation
        in: query
        name: state
        type: string
      - description: Client real IP address
        in: header
        name: X-Real-IP
        required: true
        type: string
      - description: Client User-Agent
        in: header
        name: User-Agent
        required: true
        type: string
      produces:
      - application/json
      responses:
        "307":
          description: Redirect to success URL
        "400":
          description: invalid request or missing device info
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "404":
          description: provider not supported or resource not found
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
      summary: Handle OIDC provider callback
      tags:
      - OIDC
  /auth/oidc/{provider}/start:
    get:
      consumes:
      - application/json
      description: Redirects user to the OIDC provider's authorization URL
      parameters:
      - description: OIDC provider identifier
        in: path
        name: provider
        required: true
        type: string
      produces:
      - application/json
      responses:
        "307":
          description: Redirect to provider auth URL
        "400":
          description: invalid provider
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
      summary: Start OIDC authentication flow
      tags:
      - OIDC
  /auth/recovery/check:
    post:
      consumes:
      - application/json
      description: Validate a recovery code
      parameters:
      - description: code
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/github_com_JMURv_sso_internal_dto.CheckForgotPasswordEmailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: invalid code
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "404":
          description: code not found
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
      summary: Check forgot‐password code
      tags:
      - PasswordRecovery
  /auth/recovery/send:
    post:
      consumes:
      - application/json
      description: Verify reCAPTCHA and send recovery email
      parameters:
      - description: email, reCAPTCHA token
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/github_com_JMURv_sso_internal_dto.SendForgotPasswordEmail'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "404":
          description: email not found
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
      summary: Send forgot‐password email
      tags:
      - PasswordRecovery
  /auth/webauthn/login/finish:
    post:
      consumes:
      - application/json
      description: Verifies client assertion, sets auth cookies, and returns tokens
      parameters:
      - description: User email header
        in: header
        name: X-User-Email
        required: true
        type: string
      - description: Client real IP address
        in: header
        name: X-Real-IP
        required: true
        type: string
      - description: Client User-Agent
        in: header
        name: User-Agent
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_dto.TokenPair'
        "400":
          description: missing email or device info
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
      summary: Complete WebAuthn login
      tags:
      - WebAuthn
  /auth/webauthn/login/start:
    post:
      consumes:
      - application/json
      description: Generates an authentication challenge for the client
      parameters:
      - description: Email + reCAPTCHA token
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/github_com_JMURv_sso_internal_dto.LoginStartRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/protocol.CredentialAssertion'
        "401":
          description: invalid captcha
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "404":
          description: user not found
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
      summary: Start WebAuthn login
      tags:
      - WebAuthn
  /auth/webauthn/register/finish:
    post:
      consumes:
      - application/json
      description: Verifies the client response to finalize registration
      parameters:
      - description: Registration result from client
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/http.Request'
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: invalid request
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
      summary: Complete WebAuthn registration
      tags:
      - WebAuthn
  /auth/webauthn/register/start:
    post:
      description: Generates a registration challenge for the client
      parameters:
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/protocol.CredentialCreation'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
      summary: Start WebAuthn registration
      tags:
      - WebAuthn
  /device:
    get:
      description: Retrieve a list of registered devices for the current user
      parameters:
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/github_com_JMURv_sso_internal_models.Device'
              type: array
            type: array
        "404":
          description: no devices found
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
      summary: List all devices for the authenticated user
      tags:
      - Device
  /device/{id}:
    delete:
      description: Remove a device owned by the current user
      parameters:
      - description: Device UUID
        in: path
        name: id
        required: true
        type: string
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: invalid device ID
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "404":
          description: device not found
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
      summary: Delete a device
      tags:
      - Device
    get:
      description: Retrieve details of a device owned by the current user
      parameters:
      - description: Device UUID
        in: path
        name: id
        required: true
        type: string
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_models.Device'
        "400":
          description: invalid device ID path parameter
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "404":
          description: device not found
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
      summary: Get a specific device by ID
      tags:
      - Device
    put:
      consumes:
      - application/json
      description: Modify properties of a device owned by the current user
      parameters:
      - description: Device UUID
        in: path
        name: id
        required: true
        type: string
      - description: Update payload
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/github_com_JMURv_sso_internal_dto.UpdateDeviceRequest'
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: invalid device ID or payload
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "404":
          description: device not found
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
      summary: Update a device
      tags:
      - Device
  /perm:
    get:
      description: Retrieve a paginated list of permissions with optional filters
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Page size
        in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_dto.PaginatedPermissionResponse'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
      summary: List permissions
      tags:
      - Permission
    post:
      consumes:
      - application/json
      description: Add a new permission to the system
      parameters:
      - description: Permission details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/github_com_JMURv_sso_internal_dto.CreatePermissionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Permission ID
          schema:
            type: int
        "400":
          description: invalid request
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "409":
          description: permission already exists
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
      summary: Create a new permission
      tags:
      - Permission
  /perm/{id}:
    delete:
      description: Remove a permission by ID
      parameters:
      - description: Permission ID
        in: path
        name: id
        required: true
        type: integer
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: invalid ID
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "404":
          description: permission not found
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
      summary: Delete a permission
      tags:
      - Permission
    get:
      description: Retrieve a specific permission
      parameters:
      - description: Permission ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_models.Permission'
        "400":
          description: invalid ID
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "404":
          description: permission not found
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
      summary: Get permission by ID
      tags:
      - Permission
    put:
      consumes:
      - application/json
      description: Modify an existing permission
      parameters:
      - description: Permission ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated permission data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/github_com_JMURv_sso_internal_dto.UpdatePermissionRequest'
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: invalid request
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "404":
          description: permission not found
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
      summary: Update a permission
      tags:
      - Permission
  /roles:
    get:
      description: Retrieve a paginated list of roles with optional filters
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Page size
        in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_dto.PaginatedRoleResponse'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
      summary: List roles
      tags:
      - Role
    post:
      consumes:
      - application/json
      description: Add a new role with associated permissions
      parameters:
      - description: Role details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/github_com_JMURv_sso_internal_dto.CreateRoleRequest'
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Role ID
          schema:
            type: int
        "400":
          description: invalid request
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "409":
          description: role already exists
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
      summary: Create a new role
      tags:
      - Role
  /roles/{id}:
    delete:
      description: Remove a role by ID
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: invalid ID
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "404":
          description: role not found
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
      summary: Delete a role
      tags:
      - Role
    get:
      description: Retrieve details of a specific role
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_models.Role'
        "400":
          description: invalid ID
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "404":
          description: role not found
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
      summary: Get role by ID
      tags:
      - Role
    put:
      consumes:
      - application/json
      description: Modify an existing role's name or permissions
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated role data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/github_com_JMURv_sso_internal_dto.UpdateRoleRequest'
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: invalid request
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "404":
          description: role not found
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
      summary: Update a role
      tags:
      - Role
  /users:
    get:
      consumes:
      - application/json
      description: Retrieve a paginated list of users with optional filters
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Page size
        in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/github_com_JMURv_sso_internal_dto.PaginatedUserResponse'
            type: array
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
      summary: List all users
      tags:
      - User
    post:
      consumes:
      - multipart/form-data
      description: Creates a user with optional avatar upload
      parameters:
      - description: JSON payload in 'data' field
        in: formData
        name: data
        required: true
        type: string
      - description: Avatar image file
        in: formData
        name: avatar
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_dto.CreateUserResponse'
        "400":
          description: bad request or file too large
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "409":
          description: user already exists
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
      summary: Create a new user
      tags:
      - User
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Removes a user by UUID
      parameters:
      - description: User UUID
        in: path
        name: id
        required: true
        type: string
      - description: Bearer token, e.g. 'Bearer {jwt}'
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "401":
          description: unauthorized
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "404":
          description: user not found
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
      summary: Delete a user
      tags:
      - User
    get:
      consumes:
      - application/json
      description: Retrieve a user by their UUID
      parameters:
      - description: User UUID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_models.User'
        "400":
          description: invalid UUID
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "404":
          description: user not found
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
      summary: Get user by ID
      tags:
      - User
    put:
      consumes:
      - multipart/form-data
      description: Updates user profile and avatar
      parameters:
      - description: User UUID
        in: path
        name: id
        required: true
        type: string
      - description: JSON payload in 'data' field
        in: formData
        name: data
        required: true
        type: string
      - description: Avatar image file
        in: formData
        name: avatar
        type: file
      - description: Bearer token, e.g. 'Bearer {jwt}'
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "401":
          description: unauthorized
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "404":
          description: user not found
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
      summary: Update an existing user
      tags:
      - User
  /users/exists:
    post:
      consumes:
      - application/json
      description: Returns 200 if user exists, 404 otherwise
      parameters:
      - description: Email payload
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/github_com_JMURv_sso_internal_dto.CheckEmailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_dto.ExistsUserResponse'
        "404":
          description: user not found
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
      summary: Check if a user exists by email
      tags:
      - User
  /users/me:
    get:
      description: Returns the authenticated user's profile
      parameters:
      - description: Bearer token, e.g. 'Bearer {jwt}'
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_models.User'
        "401":
          description: unauthorized
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "404":
          description: user not found
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse'
      summary: Retrieve current user profile
      tags:
      - User
swagger: "2.0"
