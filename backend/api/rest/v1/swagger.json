{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "paths": {
        "/auth/email/check": {
            "post": {
                "security": [
                    {
                        "device": []
                    }
                ],
                "description": "Exchange a valid email code for JWT tokens",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "EmailAuth"
                ],
                "summary": "Check email login code",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Client real IP address",
                        "name": "X-Real-IP",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Client User-Agent",
                        "name": "User-Agent",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "code, reCAPTCHA token",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_dto.CheckLoginCodeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_dto.TokenPair"
                        }
                    },
                    "400": {
                        "description": "missing device info or bad payload",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "404": {
                        "description": "code not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    }
                }
            }
        },
        "/auth/email/send": {
            "post": {
                "security": [
                    {
                        "device": []
                    }
                ],
                "description": "Verify reCAPTCHA, then send a one-time code to the user’s email. May return tokens if password also valid.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "EmailAuth"
                ],
                "summary": "Send login code via email",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Client real IP address",
                        "name": "X-Real-IP",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Client User-Agent",
                        "name": "User-Agent",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "email, password, reCAPTCHA token",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_dto.LoginCodeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_dto.TokenPair"
                        }
                    },
                    "400": {
                        "description": "missing device info or bad payload",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "401": {
                        "description": "invalid credentials or reCAPTCHA",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    }
                }
            }
        },
        "/auth/jwt": {
            "post": {
                "description": "Verify reCAPTCHA, then authenticate and set JWT cookies",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Authenticate using email \u0026 password",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Client real IP address",
                        "name": "X-Real-IP",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Client User-Agent",
                        "name": "User-Agent",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "email, password, reCAPTCHA token",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_dto.EmailAndPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_dto.TokenPair"
                        }
                    },
                    "400": {
                        "description": "missing device info or bad payload",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "401": {
                        "description": "invalid credentials or reCAPTCHA",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "404": {
                        "description": "user not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    }
                }
            }
        },
        "/auth/jwt/parse": {
            "post": {
                "description": "Decode a token without requiring device header",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Parse JWT claims",
                "parameters": [
                    {
                        "description": "jwt token",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_dto.TokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_auth.Claims"
                        }
                    },
                    "404": {
                        "description": "token not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    }
                }
            }
        },
        "/auth/jwt/refresh": {
            "post": {
                "security": [
                    {
                        "device": []
                    }
                ],
                "description": "Validate device header and refresh tokens, reset cookies",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Refresh JWT tokens",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Client real IP address",
                        "name": "X-Real-IP",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Client User-Agent",
                        "name": "User-Agent",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "refresh_token",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_dto.RefreshRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_dto.TokenPair"
                        }
                    },
                    "400": {
                        "description": "missing device info or bad payload",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "401": {
                        "description": "token revoked or invalid",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "404": {
                        "description": "session not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "description": "Revoke refresh token, clear JWT cookies",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Logout user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "session not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    }
                }
            }
        },
        "/auth/oauth2/{provider}/callback": {
            "get": {
                "description": "Processes provider callback, exchanges code, sets authentication cookies, and redirects to success URL",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OAuth2"
                ],
                "summary": "Handle OAuth2 provider callback",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OAuth2 provider identifier",
                        "name": "provider",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Authorization code returned by provider",
                        "name": "code",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "State parameter for CSRF mitigation",
                        "name": "state",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Client real IP address",
                        "name": "X-Real-IP",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Client User-Agent",
                        "name": "User-Agent",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "307": {
                        "description": "Redirect to success URL"
                    },
                    "400": {
                        "description": "invalid request or missing device info",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "404": {
                        "description": "provider not supported or resource not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    }
                }
            }
        },
        "/auth/oauth2/{provider}/start": {
            "get": {
                "description": "Redirects user to the OAuth2 provider's authorization URL",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OAuth2"
                ],
                "summary": "Start OAuth2 authentication flow",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OAuth2 provider identifier",
                        "name": "provider",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "307": {
                        "description": "Redirect to provider auth URL"
                    },
                    "400": {
                        "description": "invalid provider",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    }
                }
            }
        },
        "/auth/oidc/{provider}/callback": {
            "get": {
                "description": "Processes provider callback, exchanges code, sets authentication cookies, and redirects to success URL",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OIDC"
                ],
                "summary": "Handle OIDC provider callback",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OIDC provider identifier",
                        "name": "provider",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Authorization code returned by provider",
                        "name": "code",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "State parameter for CSRF mitigation",
                        "name": "state",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Client real IP address",
                        "name": "X-Real-IP",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Client User-Agent",
                        "name": "User-Agent",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "307": {
                        "description": "Redirect to success URL"
                    },
                    "400": {
                        "description": "invalid request or missing device info",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "404": {
                        "description": "provider not supported or resource not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    }
                }
            }
        },
        "/auth/oidc/{provider}/start": {
            "get": {
                "description": "Redirects user to the OIDC provider's authorization URL",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OIDC"
                ],
                "summary": "Start OIDC authentication flow",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OIDC provider identifier",
                        "name": "provider",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "307": {
                        "description": "Redirect to provider auth URL"
                    },
                    "400": {
                        "description": "invalid provider",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    }
                }
            }
        },
        "/auth/recovery/check": {
            "post": {
                "description": "Validate a recovery code",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PasswordRecovery"
                ],
                "summary": "Check forgot‐password code",
                "parameters": [
                    {
                        "description": "code",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_dto.CheckForgotPasswordEmailRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "401": {
                        "description": "invalid code",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "404": {
                        "description": "code not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    }
                }
            }
        },
        "/auth/recovery/send": {
            "post": {
                "description": "Verify reCAPTCHA and send recovery email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PasswordRecovery"
                ],
                "summary": "Send forgot‐password email",
                "parameters": [
                    {
                        "description": "email, reCAPTCHA token",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_dto.SendForgotPasswordEmail"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "email not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    }
                }
            }
        },
        "/device": {
            "get": {
                "description": "Retrieve a list of registered devices for the current user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Device"
                ],
                "summary": "List all devices for the authenticated user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/github_com_JMURv_sso_internal_models.Device"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "no devices found",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    }
                }
            }
        },
        "/device/{id}": {
            "get": {
                "description": "Retrieve details of a device owned by the current user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Device"
                ],
                "summary": "Get a specific device by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Device UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_models.Device"
                        }
                    },
                    "400": {
                        "description": "invalid device ID path parameter",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "404": {
                        "description": "device not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Modify properties of a device owned by the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Device"
                ],
                "summary": "Update a device",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Device UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update payload",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_dto.UpdateDeviceRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "invalid device ID or payload",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "404": {
                        "description": "device not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove a device owned by the current user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Device"
                ],
                "summary": "Delete a device",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Device UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "invalid device ID",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "404": {
                        "description": "device not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    }
                }
            }
        },
        "/perm": {
            "get": {
                "description": "Retrieve a paginated list of permissions with optional filters",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Permission"
                ],
                "summary": "List permissions",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Page size",
                        "name": "size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_dto.PaginatedPermissionResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new permission to the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Permission"
                ],
                "summary": "Create a new permission",
                "parameters": [
                    {
                        "description": "Permission details",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_dto.CreatePermissionRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Permission ID",
                        "schema": {
                            "type": "int"
                        }
                    },
                    "400": {
                        "description": "invalid request",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "409": {
                        "description": "permission already exists",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    }
                }
            }
        },
        "/perm/{id}": {
            "get": {
                "description": "Retrieve a specific permission",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Permission"
                ],
                "summary": "Get permission by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Permission ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_models.Permission"
                        }
                    },
                    "400": {
                        "description": "invalid ID",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "404": {
                        "description": "permission not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Modify an existing permission",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Permission"
                ],
                "summary": "Update a permission",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Permission ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated permission data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_dto.UpdatePermissionRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "invalid request",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "404": {
                        "description": "permission not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Remove a permission by ID",
                "tags": [
                    "Permission"
                ],
                "summary": "Delete a permission",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Permission ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "invalid ID",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "404": {
                        "description": "permission not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    }
                }
            }
        },
        "/roles": {
            "get": {
                "description": "Retrieve a paginated list of roles with optional filters",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Role"
                ],
                "summary": "List roles",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Page size",
                        "name": "size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_dto.PaginatedRoleResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new role with associated permissions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Role"
                ],
                "summary": "Create a new role",
                "parameters": [
                    {
                        "description": "Role details",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_dto.CreateRoleRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Role ID",
                        "schema": {
                            "type": "int"
                        }
                    },
                    "400": {
                        "description": "invalid request",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "409": {
                        "description": "role already exists",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    }
                }
            }
        },
        "/roles/{id}": {
            "get": {
                "description": "Retrieve details of a specific role",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Role"
                ],
                "summary": "Get role by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Role ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_models.Role"
                        }
                    },
                    "400": {
                        "description": "invalid ID",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "404": {
                        "description": "role not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Modify an existing role's name or permissions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Role"
                ],
                "summary": "Update a role",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Role ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated role data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_dto.UpdateRoleRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "invalid request",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "404": {
                        "description": "role not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Remove a role by ID",
                "tags": [
                    "Role"
                ],
                "summary": "Delete a role",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Role ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "invalid ID",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "404": {
                        "description": "role not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "github_com_JMURv_sso_internal_auth.Claims": {
            "type": "object",
            "properties": {
                "aud": {
                    "description": "the `aud` (Audience) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.3",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "exp": {
                    "description": "the `exp` (Expiration Time) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.4",
                    "allOf": [
                        {
                            "$ref": "#/definitions/jwt.NumericDate"
                        }
                    ]
                },
                "iat": {
                    "description": "the `iat` (Issued At) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.6",
                    "allOf": [
                        {
                            "$ref": "#/definitions/jwt.NumericDate"
                        }
                    ]
                },
                "iss": {
                    "description": "the `iss` (Issuer) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.1",
                    "type": "string"
                },
                "jti": {
                    "description": "the `jti` (JWT ID) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.7",
                    "type": "string"
                },
                "nbf": {
                    "description": "the `nbf` (Not Before) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.5",
                    "allOf": [
                        {
                            "$ref": "#/definitions/jwt.NumericDate"
                        }
                    ]
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_JMURv_sso_internal_models.Role"
                    }
                },
                "sub": {
                    "description": "the `sub` (Subject) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.2",
                    "type": "string"
                },
                "uid": {
                    "type": "string"
                }
            }
        },
        "github_com_JMURv_sso_internal_dto.CheckForgotPasswordEmailRequest": {
            "type": "object",
            "required": [
                "password",
                "token",
                "uidb64"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "token": {
                    "type": "integer"
                },
                "uidb64": {
                    "type": "string"
                }
            }
        },
        "github_com_JMURv_sso_internal_dto.CheckLoginCodeRequest": {
            "type": "object",
            "required": [
                "code",
                "email"
            ],
            "properties": {
                "code": {
                    "type": "integer"
                },
                "email": {
                    "type": "string"
                }
            }
        },
        "github_com_JMURv_sso_internal_dto.CreatePermissionRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "github_com_JMURv_sso_internal_dto.CreateRoleRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "github_com_JMURv_sso_internal_dto.EmailAndPasswordRequest": {
            "type": "object",
            "required": [
                "email",
                "password",
                "token"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "github_com_JMURv_sso_internal_dto.LoginCodeRequest": {
            "type": "object",
            "required": [
                "email",
                "password",
                "token"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "github_com_JMURv_sso_internal_dto.PaginatedPermissionResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "current_page": {
                    "type": "integer"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_JMURv_sso_internal_models.Permission"
                    }
                },
                "has_next_page": {
                    "type": "boolean"
                },
                "total_pages": {
                    "type": "integer"
                }
            }
        },
        "github_com_JMURv_sso_internal_dto.PaginatedRoleResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "current_page": {
                    "type": "integer"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_JMURv_sso_internal_models.Role"
                    }
                },
                "has_next_page": {
                    "type": "boolean"
                },
                "total_pages": {
                    "type": "integer"
                }
            }
        },
        "github_com_JMURv_sso_internal_dto.RefreshRequest": {
            "type": "object",
            "required": [
                "refresh"
            ],
            "properties": {
                "refresh": {
                    "type": "string"
                }
            }
        },
        "github_com_JMURv_sso_internal_dto.SendForgotPasswordEmail": {
            "type": "object",
            "required": [
                "email",
                "token"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "github_com_JMURv_sso_internal_dto.TokenPair": {
            "type": "object",
            "properties": {
                "access": {
                    "type": "string"
                },
                "refresh": {
                    "type": "string"
                }
            }
        },
        "github_com_JMURv_sso_internal_dto.TokenRequest": {
            "type": "object",
            "required": [
                "token"
            ],
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "github_com_JMURv_sso_internal_dto.UpdateDeviceRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "github_com_JMURv_sso_internal_dto.UpdatePermissionRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "github_com_JMURv_sso_internal_dto.UpdateRoleRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "github_com_JMURv_sso_internal_hdl_http_utils.ErrorsResponse": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "github_com_JMURv_sso_internal_models.Device": {
            "type": "object",
            "properties": {
                "browser": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "device_type": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "ip": {
                    "type": "string"
                },
                "last_active": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "os": {
                    "type": "string"
                },
                "ua": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "github_com_JMURv_sso_internal_models.Permission": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "github_com_JMURv_sso_internal_models.Role": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_JMURv_sso_internal_models.Permission"
                    }
                }
            }
        },
        "jwt.NumericDate": {
            "type": "object",
            "properties": {
                "time.Time": {
                    "type": "string"
                }
            }
        }
    }
}