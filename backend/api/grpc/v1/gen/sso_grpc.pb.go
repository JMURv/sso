// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: api/grpc/v1/gen/sso.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Auth_Authenticate_FullMethodName             = "/gen.Auth/Authenticate"
	Auth_ParseClaims_FullMethodName              = "/gen.Auth/ParseClaims"
	Auth_Refresh_FullMethodName                  = "/gen.Auth/Refresh"
	Auth_SendLoginCode_FullMethodName            = "/gen.Auth/SendLoginCode"
	Auth_CheckLoginCode_FullMethodName           = "/gen.Auth/CheckLoginCode"
	Auth_SendForgotPasswordEmail_FullMethodName  = "/gen.Auth/SendForgotPasswordEmail"
	Auth_CheckForgotPasswordEmail_FullMethodName = "/gen.Auth/CheckForgotPasswordEmail"
	Auth_Logout_FullMethodName                   = "/gen.Auth/Logout"
)

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthClient interface {
	Authenticate(ctx context.Context, in *SSO_EmailAndPasswordRequest, opts ...grpc.CallOption) (*SSO_TokenPair, error)
	ParseClaims(ctx context.Context, in *SSO_StringMsg, opts ...grpc.CallOption) (*SSO_ParseClaimsRes, error)
	Refresh(ctx context.Context, in *SSO_RefreshRequest, opts ...grpc.CallOption) (*SSO_TokenPair, error)
	SendLoginCode(ctx context.Context, in *SSO_SendLoginCodeReq, opts ...grpc.CallOption) (*SSO_TokenPair, error)
	CheckLoginCode(ctx context.Context, in *SSO_CheckLoginCodeReq, opts ...grpc.CallOption) (*SSO_TokenPair, error)
	SendForgotPasswordEmail(ctx context.Context, in *SSO_EmailMsg, opts ...grpc.CallOption) (*SSO_Empty, error)
	CheckForgotPasswordEmail(ctx context.Context, in *SSO_CheckForgotPasswordEmailReq, opts ...grpc.CallOption) (*SSO_Empty, error)
	Logout(ctx context.Context, in *SSO_Empty, opts ...grpc.CallOption) (*SSO_Empty, error)
}

type authClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthClient(cc grpc.ClientConnInterface) AuthClient {
	return &authClient{cc}
}

func (c *authClient) Authenticate(ctx context.Context, in *SSO_EmailAndPasswordRequest, opts ...grpc.CallOption) (*SSO_TokenPair, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SSO_TokenPair)
	err := c.cc.Invoke(ctx, Auth_Authenticate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) ParseClaims(ctx context.Context, in *SSO_StringMsg, opts ...grpc.CallOption) (*SSO_ParseClaimsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SSO_ParseClaimsRes)
	err := c.cc.Invoke(ctx, Auth_ParseClaims_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) Refresh(ctx context.Context, in *SSO_RefreshRequest, opts ...grpc.CallOption) (*SSO_TokenPair, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SSO_TokenPair)
	err := c.cc.Invoke(ctx, Auth_Refresh_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) SendLoginCode(ctx context.Context, in *SSO_SendLoginCodeReq, opts ...grpc.CallOption) (*SSO_TokenPair, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SSO_TokenPair)
	err := c.cc.Invoke(ctx, Auth_SendLoginCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) CheckLoginCode(ctx context.Context, in *SSO_CheckLoginCodeReq, opts ...grpc.CallOption) (*SSO_TokenPair, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SSO_TokenPair)
	err := c.cc.Invoke(ctx, Auth_CheckLoginCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) SendForgotPasswordEmail(ctx context.Context, in *SSO_EmailMsg, opts ...grpc.CallOption) (*SSO_Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SSO_Empty)
	err := c.cc.Invoke(ctx, Auth_SendForgotPasswordEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) CheckForgotPasswordEmail(ctx context.Context, in *SSO_CheckForgotPasswordEmailReq, opts ...grpc.CallOption) (*SSO_Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SSO_Empty)
	err := c.cc.Invoke(ctx, Auth_CheckForgotPasswordEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) Logout(ctx context.Context, in *SSO_Empty, opts ...grpc.CallOption) (*SSO_Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SSO_Empty)
	err := c.cc.Invoke(ctx, Auth_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
// All implementations must embed UnimplementedAuthServer
// for forward compatibility.
type AuthServer interface {
	Authenticate(context.Context, *SSO_EmailAndPasswordRequest) (*SSO_TokenPair, error)
	ParseClaims(context.Context, *SSO_StringMsg) (*SSO_ParseClaimsRes, error)
	Refresh(context.Context, *SSO_RefreshRequest) (*SSO_TokenPair, error)
	SendLoginCode(context.Context, *SSO_SendLoginCodeReq) (*SSO_TokenPair, error)
	CheckLoginCode(context.Context, *SSO_CheckLoginCodeReq) (*SSO_TokenPair, error)
	SendForgotPasswordEmail(context.Context, *SSO_EmailMsg) (*SSO_Empty, error)
	CheckForgotPasswordEmail(context.Context, *SSO_CheckForgotPasswordEmailReq) (*SSO_Empty, error)
	Logout(context.Context, *SSO_Empty) (*SSO_Empty, error)
	mustEmbedUnimplementedAuthServer()
}

// UnimplementedAuthServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthServer struct{}

func (UnimplementedAuthServer) Authenticate(context.Context, *SSO_EmailAndPasswordRequest) (*SSO_TokenPair, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedAuthServer) ParseClaims(context.Context, *SSO_StringMsg) (*SSO_ParseClaimsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseClaims not implemented")
}
func (UnimplementedAuthServer) Refresh(context.Context, *SSO_RefreshRequest) (*SSO_TokenPair, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}
func (UnimplementedAuthServer) SendLoginCode(context.Context, *SSO_SendLoginCodeReq) (*SSO_TokenPair, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendLoginCode not implemented")
}
func (UnimplementedAuthServer) CheckLoginCode(context.Context, *SSO_CheckLoginCodeReq) (*SSO_TokenPair, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckLoginCode not implemented")
}
func (UnimplementedAuthServer) SendForgotPasswordEmail(context.Context, *SSO_EmailMsg) (*SSO_Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendForgotPasswordEmail not implemented")
}
func (UnimplementedAuthServer) CheckForgotPasswordEmail(context.Context, *SSO_CheckForgotPasswordEmailReq) (*SSO_Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckForgotPasswordEmail not implemented")
}
func (UnimplementedAuthServer) Logout(context.Context, *SSO_Empty) (*SSO_Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedAuthServer) mustEmbedUnimplementedAuthServer() {}
func (UnimplementedAuthServer) testEmbeddedByValue()              {}

// UnsafeAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServer will
// result in compilation errors.
type UnsafeAuthServer interface {
	mustEmbedUnimplementedAuthServer()
}

func RegisterAuthServer(s grpc.ServiceRegistrar, srv AuthServer) {
	// If the following call pancis, it indicates UnimplementedAuthServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Auth_ServiceDesc, srv)
}

func _Auth_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSO_EmailAndPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_Authenticate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Authenticate(ctx, req.(*SSO_EmailAndPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_ParseClaims_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSO_StringMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).ParseClaims(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_ParseClaims_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).ParseClaims(ctx, req.(*SSO_StringMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSO_RefreshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_Refresh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Refresh(ctx, req.(*SSO_RefreshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_SendLoginCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSO_SendLoginCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).SendLoginCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_SendLoginCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).SendLoginCode(ctx, req.(*SSO_SendLoginCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_CheckLoginCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSO_CheckLoginCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).CheckLoginCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_CheckLoginCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).CheckLoginCode(ctx, req.(*SSO_CheckLoginCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_SendForgotPasswordEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSO_EmailMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).SendForgotPasswordEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_SendForgotPasswordEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).SendForgotPasswordEmail(ctx, req.(*SSO_EmailMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_CheckForgotPasswordEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSO_CheckForgotPasswordEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).CheckForgotPasswordEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_CheckForgotPasswordEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).CheckForgotPasswordEmail(ctx, req.(*SSO_CheckForgotPasswordEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSO_Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Logout(ctx, req.(*SSO_Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Auth_ServiceDesc is the grpc.ServiceDesc for Auth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gen.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _Auth_Authenticate_Handler,
		},
		{
			MethodName: "ParseClaims",
			Handler:    _Auth_ParseClaims_Handler,
		},
		{
			MethodName: "Refresh",
			Handler:    _Auth_Refresh_Handler,
		},
		{
			MethodName: "SendLoginCode",
			Handler:    _Auth_SendLoginCode_Handler,
		},
		{
			MethodName: "CheckLoginCode",
			Handler:    _Auth_CheckLoginCode_Handler,
		},
		{
			MethodName: "SendForgotPasswordEmail",
			Handler:    _Auth_SendForgotPasswordEmail_Handler,
		},
		{
			MethodName: "CheckForgotPasswordEmail",
			Handler:    _Auth_CheckForgotPasswordEmail_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _Auth_Logout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/grpc/v1/gen/sso.proto",
}

const (
	Users_ExistUser_FullMethodName  = "/gen.Users/ExistUser"
	Users_GetMe_FullMethodName      = "/gen.Users/GetMe"
	Users_UpdateMe_FullMethodName   = "/gen.Users/UpdateMe"
	Users_ListUsers_FullMethodName  = "/gen.Users/ListUsers"
	Users_CreateUser_FullMethodName = "/gen.Users/CreateUser"
	Users_GetUser_FullMethodName    = "/gen.Users/GetUser"
	Users_UpdateUser_FullMethodName = "/gen.Users/UpdateUser"
	Users_DeleteUser_FullMethodName = "/gen.Users/DeleteUser"
)

// UsersClient is the client API for Users service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsersClient interface {
	ExistUser(ctx context.Context, in *SSO_ExistUserRequest, opts ...grpc.CallOption) (*SSO_ExistUserResponse, error)
	GetMe(ctx context.Context, in *SSO_Empty, opts ...grpc.CallOption) (*SSO_User, error)
	UpdateMe(ctx context.Context, in *SSO_UpdateUserReq, opts ...grpc.CallOption) (*SSO_User, error)
	ListUsers(ctx context.Context, in *SSO_UserListRequest, opts ...grpc.CallOption) (*SSO_UserListResponse, error)
	CreateUser(ctx context.Context, in *SSO_CreateUserReq, opts ...grpc.CallOption) (*SSO_CreateUserRes, error)
	GetUser(ctx context.Context, in *SSO_UuidMsg, opts ...grpc.CallOption) (*SSO_User, error)
	UpdateUser(ctx context.Context, in *SSO_UpdateUserReq, opts ...grpc.CallOption) (*SSO_UuidMsg, error)
	DeleteUser(ctx context.Context, in *SSO_UuidMsg, opts ...grpc.CallOption) (*SSO_Empty, error)
}

type usersClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersClient(cc grpc.ClientConnInterface) UsersClient {
	return &usersClient{cc}
}

func (c *usersClient) ExistUser(ctx context.Context, in *SSO_ExistUserRequest, opts ...grpc.CallOption) (*SSO_ExistUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SSO_ExistUserResponse)
	err := c.cc.Invoke(ctx, Users_ExistUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetMe(ctx context.Context, in *SSO_Empty, opts ...grpc.CallOption) (*SSO_User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SSO_User)
	err := c.cc.Invoke(ctx, Users_GetMe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) UpdateMe(ctx context.Context, in *SSO_UpdateUserReq, opts ...grpc.CallOption) (*SSO_User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SSO_User)
	err := c.cc.Invoke(ctx, Users_UpdateMe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) ListUsers(ctx context.Context, in *SSO_UserListRequest, opts ...grpc.CallOption) (*SSO_UserListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SSO_UserListResponse)
	err := c.cc.Invoke(ctx, Users_ListUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) CreateUser(ctx context.Context, in *SSO_CreateUserReq, opts ...grpc.CallOption) (*SSO_CreateUserRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SSO_CreateUserRes)
	err := c.cc.Invoke(ctx, Users_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetUser(ctx context.Context, in *SSO_UuidMsg, opts ...grpc.CallOption) (*SSO_User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SSO_User)
	err := c.cc.Invoke(ctx, Users_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) UpdateUser(ctx context.Context, in *SSO_UpdateUserReq, opts ...grpc.CallOption) (*SSO_UuidMsg, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SSO_UuidMsg)
	err := c.cc.Invoke(ctx, Users_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) DeleteUser(ctx context.Context, in *SSO_UuidMsg, opts ...grpc.CallOption) (*SSO_Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SSO_Empty)
	err := c.cc.Invoke(ctx, Users_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersServer is the server API for Users service.
// All implementations must embed UnimplementedUsersServer
// for forward compatibility.
type UsersServer interface {
	ExistUser(context.Context, *SSO_ExistUserRequest) (*SSO_ExistUserResponse, error)
	GetMe(context.Context, *SSO_Empty) (*SSO_User, error)
	UpdateMe(context.Context, *SSO_UpdateUserReq) (*SSO_User, error)
	ListUsers(context.Context, *SSO_UserListRequest) (*SSO_UserListResponse, error)
	CreateUser(context.Context, *SSO_CreateUserReq) (*SSO_CreateUserRes, error)
	GetUser(context.Context, *SSO_UuidMsg) (*SSO_User, error)
	UpdateUser(context.Context, *SSO_UpdateUserReq) (*SSO_UuidMsg, error)
	DeleteUser(context.Context, *SSO_UuidMsg) (*SSO_Empty, error)
	mustEmbedUnimplementedUsersServer()
}

// UnimplementedUsersServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUsersServer struct{}

func (UnimplementedUsersServer) ExistUser(context.Context, *SSO_ExistUserRequest) (*SSO_ExistUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistUser not implemented")
}
func (UnimplementedUsersServer) GetMe(context.Context, *SSO_Empty) (*SSO_User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMe not implemented")
}
func (UnimplementedUsersServer) UpdateMe(context.Context, *SSO_UpdateUserReq) (*SSO_User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMe not implemented")
}
func (UnimplementedUsersServer) ListUsers(context.Context, *SSO_UserListRequest) (*SSO_UserListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedUsersServer) CreateUser(context.Context, *SSO_CreateUserReq) (*SSO_CreateUserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUsersServer) GetUser(context.Context, *SSO_UuidMsg) (*SSO_User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUsersServer) UpdateUser(context.Context, *SSO_UpdateUserReq) (*SSO_UuidMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUsersServer) DeleteUser(context.Context, *SSO_UuidMsg) (*SSO_Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUsersServer) mustEmbedUnimplementedUsersServer() {}
func (UnimplementedUsersServer) testEmbeddedByValue()               {}

// UnsafeUsersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersServer will
// result in compilation errors.
type UnsafeUsersServer interface {
	mustEmbedUnimplementedUsersServer()
}

func RegisterUsersServer(s grpc.ServiceRegistrar, srv UsersServer) {
	// If the following call pancis, it indicates UnimplementedUsersServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Users_ServiceDesc, srv)
}

func _Users_ExistUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSO_ExistUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).ExistUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_ExistUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).ExistUser(ctx, req.(*SSO_ExistUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSO_Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_GetMe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetMe(ctx, req.(*SSO_Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_UpdateMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSO_UpdateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).UpdateMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_UpdateMe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).UpdateMe(ctx, req.(*SSO_UpdateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSO_UserListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_ListUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).ListUsers(ctx, req.(*SSO_UserListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSO_CreateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).CreateUser(ctx, req.(*SSO_CreateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSO_UuidMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetUser(ctx, req.(*SSO_UuidMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSO_UpdateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).UpdateUser(ctx, req.(*SSO_UpdateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSO_UuidMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).DeleteUser(ctx, req.(*SSO_UuidMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// Users_ServiceDesc is the grpc.ServiceDesc for Users service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Users_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gen.Users",
	HandlerType: (*UsersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExistUser",
			Handler:    _Users_ExistUser_Handler,
		},
		{
			MethodName: "GetMe",
			Handler:    _Users_GetMe_Handler,
		},
		{
			MethodName: "UpdateMe",
			Handler:    _Users_UpdateMe_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _Users_ListUsers_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _Users_CreateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Users_GetUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Users_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _Users_DeleteUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/grpc/v1/gen/sso.proto",
}

const (
	Permission_ListPermissions_FullMethodName  = "/gen.Permission/ListPermissions"
	Permission_CreatePermission_FullMethodName = "/gen.Permission/CreatePermission"
	Permission_GetPermission_FullMethodName    = "/gen.Permission/GetPermission"
	Permission_UpdatePermission_FullMethodName = "/gen.Permission/UpdatePermission"
	Permission_DeletePermission_FullMethodName = "/gen.Permission/DeletePermission"
)

// PermissionClient is the client API for Permission service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PermissionClient interface {
	ListPermissions(ctx context.Context, in *SSO_PermissionListRequest, opts ...grpc.CallOption) (*SSO_PermissionListResponse, error)
	CreatePermission(ctx context.Context, in *SSO_Permission, opts ...grpc.CallOption) (*SSO_Uint64Msg, error)
	GetPermission(ctx context.Context, in *SSO_Uint64Msg, opts ...grpc.CallOption) (*SSO_Permission, error)
	UpdatePermission(ctx context.Context, in *SSO_Permission, opts ...grpc.CallOption) (*SSO_Empty, error)
	DeletePermission(ctx context.Context, in *SSO_Uint64Msg, opts ...grpc.CallOption) (*SSO_Empty, error)
}

type permissionClient struct {
	cc grpc.ClientConnInterface
}

func NewPermissionClient(cc grpc.ClientConnInterface) PermissionClient {
	return &permissionClient{cc}
}

func (c *permissionClient) ListPermissions(ctx context.Context, in *SSO_PermissionListRequest, opts ...grpc.CallOption) (*SSO_PermissionListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SSO_PermissionListResponse)
	err := c.cc.Invoke(ctx, Permission_ListPermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionClient) CreatePermission(ctx context.Context, in *SSO_Permission, opts ...grpc.CallOption) (*SSO_Uint64Msg, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SSO_Uint64Msg)
	err := c.cc.Invoke(ctx, Permission_CreatePermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionClient) GetPermission(ctx context.Context, in *SSO_Uint64Msg, opts ...grpc.CallOption) (*SSO_Permission, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SSO_Permission)
	err := c.cc.Invoke(ctx, Permission_GetPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionClient) UpdatePermission(ctx context.Context, in *SSO_Permission, opts ...grpc.CallOption) (*SSO_Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SSO_Empty)
	err := c.cc.Invoke(ctx, Permission_UpdatePermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionClient) DeletePermission(ctx context.Context, in *SSO_Uint64Msg, opts ...grpc.CallOption) (*SSO_Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SSO_Empty)
	err := c.cc.Invoke(ctx, Permission_DeletePermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PermissionServer is the server API for Permission service.
// All implementations must embed UnimplementedPermissionServer
// for forward compatibility.
type PermissionServer interface {
	ListPermissions(context.Context, *SSO_PermissionListRequest) (*SSO_PermissionListResponse, error)
	CreatePermission(context.Context, *SSO_Permission) (*SSO_Uint64Msg, error)
	GetPermission(context.Context, *SSO_Uint64Msg) (*SSO_Permission, error)
	UpdatePermission(context.Context, *SSO_Permission) (*SSO_Empty, error)
	DeletePermission(context.Context, *SSO_Uint64Msg) (*SSO_Empty, error)
	mustEmbedUnimplementedPermissionServer()
}

// UnimplementedPermissionServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPermissionServer struct{}

func (UnimplementedPermissionServer) ListPermissions(context.Context, *SSO_PermissionListRequest) (*SSO_PermissionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPermissions not implemented")
}
func (UnimplementedPermissionServer) CreatePermission(context.Context, *SSO_Permission) (*SSO_Uint64Msg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePermission not implemented")
}
func (UnimplementedPermissionServer) GetPermission(context.Context, *SSO_Uint64Msg) (*SSO_Permission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermission not implemented")
}
func (UnimplementedPermissionServer) UpdatePermission(context.Context, *SSO_Permission) (*SSO_Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePermission not implemented")
}
func (UnimplementedPermissionServer) DeletePermission(context.Context, *SSO_Uint64Msg) (*SSO_Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermission not implemented")
}
func (UnimplementedPermissionServer) mustEmbedUnimplementedPermissionServer() {}
func (UnimplementedPermissionServer) testEmbeddedByValue()                    {}

// UnsafePermissionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PermissionServer will
// result in compilation errors.
type UnsafePermissionServer interface {
	mustEmbedUnimplementedPermissionServer()
}

func RegisterPermissionServer(s grpc.ServiceRegistrar, srv PermissionServer) {
	// If the following call pancis, it indicates UnimplementedPermissionServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Permission_ServiceDesc, srv)
}

func _Permission_ListPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSO_PermissionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServer).ListPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Permission_ListPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServer).ListPermissions(ctx, req.(*SSO_PermissionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permission_CreatePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSO_Permission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServer).CreatePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Permission_CreatePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServer).CreatePermission(ctx, req.(*SSO_Permission))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permission_GetPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSO_Uint64Msg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServer).GetPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Permission_GetPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServer).GetPermission(ctx, req.(*SSO_Uint64Msg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permission_UpdatePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSO_Permission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServer).UpdatePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Permission_UpdatePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServer).UpdatePermission(ctx, req.(*SSO_Permission))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permission_DeletePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSO_Uint64Msg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServer).DeletePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Permission_DeletePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServer).DeletePermission(ctx, req.(*SSO_Uint64Msg))
	}
	return interceptor(ctx, in, info, handler)
}

// Permission_ServiceDesc is the grpc.ServiceDesc for Permission service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Permission_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gen.Permission",
	HandlerType: (*PermissionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPermissions",
			Handler:    _Permission_ListPermissions_Handler,
		},
		{
			MethodName: "CreatePermission",
			Handler:    _Permission_CreatePermission_Handler,
		},
		{
			MethodName: "GetPermission",
			Handler:    _Permission_GetPermission_Handler,
		},
		{
			MethodName: "UpdatePermission",
			Handler:    _Permission_UpdatePermission_Handler,
		},
		{
			MethodName: "DeletePermission",
			Handler:    _Permission_DeletePermission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/grpc/v1/gen/sso.proto",
}

const (
	Role_ListRoles_FullMethodName  = "/gen.Role/ListRoles"
	Role_CreateRole_FullMethodName = "/gen.Role/CreateRole"
	Role_GetRole_FullMethodName    = "/gen.Role/GetRole"
	Role_UpdateRole_FullMethodName = "/gen.Role/UpdateRole"
	Role_DeleteRole_FullMethodName = "/gen.Role/DeleteRole"
)

// RoleClient is the client API for Role service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoleClient interface {
	ListRoles(ctx context.Context, in *SSO_RoleListRequest, opts ...grpc.CallOption) (*SSO_RoleListResponse, error)
	CreateRole(ctx context.Context, in *SSO_Role, opts ...grpc.CallOption) (*SSO_Uint64Msg, error)
	GetRole(ctx context.Context, in *SSO_Uint64Msg, opts ...grpc.CallOption) (*SSO_Role, error)
	UpdateRole(ctx context.Context, in *SSO_Role, opts ...grpc.CallOption) (*SSO_Empty, error)
	DeleteRole(ctx context.Context, in *SSO_Uint64Msg, opts ...grpc.CallOption) (*SSO_Empty, error)
}

type roleClient struct {
	cc grpc.ClientConnInterface
}

func NewRoleClient(cc grpc.ClientConnInterface) RoleClient {
	return &roleClient{cc}
}

func (c *roleClient) ListRoles(ctx context.Context, in *SSO_RoleListRequest, opts ...grpc.CallOption) (*SSO_RoleListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SSO_RoleListResponse)
	err := c.cc.Invoke(ctx, Role_ListRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleClient) CreateRole(ctx context.Context, in *SSO_Role, opts ...grpc.CallOption) (*SSO_Uint64Msg, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SSO_Uint64Msg)
	err := c.cc.Invoke(ctx, Role_CreateRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleClient) GetRole(ctx context.Context, in *SSO_Uint64Msg, opts ...grpc.CallOption) (*SSO_Role, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SSO_Role)
	err := c.cc.Invoke(ctx, Role_GetRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleClient) UpdateRole(ctx context.Context, in *SSO_Role, opts ...grpc.CallOption) (*SSO_Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SSO_Empty)
	err := c.cc.Invoke(ctx, Role_UpdateRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleClient) DeleteRole(ctx context.Context, in *SSO_Uint64Msg, opts ...grpc.CallOption) (*SSO_Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SSO_Empty)
	err := c.cc.Invoke(ctx, Role_DeleteRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleServer is the server API for Role service.
// All implementations must embed UnimplementedRoleServer
// for forward compatibility.
type RoleServer interface {
	ListRoles(context.Context, *SSO_RoleListRequest) (*SSO_RoleListResponse, error)
	CreateRole(context.Context, *SSO_Role) (*SSO_Uint64Msg, error)
	GetRole(context.Context, *SSO_Uint64Msg) (*SSO_Role, error)
	UpdateRole(context.Context, *SSO_Role) (*SSO_Empty, error)
	DeleteRole(context.Context, *SSO_Uint64Msg) (*SSO_Empty, error)
	mustEmbedUnimplementedRoleServer()
}

// UnimplementedRoleServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRoleServer struct{}

func (UnimplementedRoleServer) ListRoles(context.Context, *SSO_RoleListRequest) (*SSO_RoleListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoles not implemented")
}
func (UnimplementedRoleServer) CreateRole(context.Context, *SSO_Role) (*SSO_Uint64Msg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedRoleServer) GetRole(context.Context, *SSO_Uint64Msg) (*SSO_Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (UnimplementedRoleServer) UpdateRole(context.Context, *SSO_Role) (*SSO_Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedRoleServer) DeleteRole(context.Context, *SSO_Uint64Msg) (*SSO_Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedRoleServer) mustEmbedUnimplementedRoleServer() {}
func (UnimplementedRoleServer) testEmbeddedByValue()              {}

// UnsafeRoleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoleServer will
// result in compilation errors.
type UnsafeRoleServer interface {
	mustEmbedUnimplementedRoleServer()
}

func RegisterRoleServer(s grpc.ServiceRegistrar, srv RoleServer) {
	// If the following call pancis, it indicates UnimplementedRoleServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Role_ServiceDesc, srv)
}

func _Role_ListRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSO_RoleListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServer).ListRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Role_ListRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServer).ListRoles(ctx, req.(*SSO_RoleListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Role_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSO_Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Role_CreateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServer).CreateRole(ctx, req.(*SSO_Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _Role_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSO_Uint64Msg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Role_GetRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServer).GetRole(ctx, req.(*SSO_Uint64Msg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Role_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSO_Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Role_UpdateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServer).UpdateRole(ctx, req.(*SSO_Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _Role_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSO_Uint64Msg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Role_DeleteRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServer).DeleteRole(ctx, req.(*SSO_Uint64Msg))
	}
	return interceptor(ctx, in, info, handler)
}

// Role_ServiceDesc is the grpc.ServiceDesc for Role service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Role_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gen.Role",
	HandlerType: (*RoleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRoles",
			Handler:    _Role_ListRoles_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _Role_CreateRole_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _Role_GetRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _Role_UpdateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _Role_DeleteRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/grpc/v1/gen/sso.proto",
}

const (
	Devices_ListDevices_FullMethodName  = "/gen.Devices/ListDevices"
	Devices_GetDevice_FullMethodName    = "/gen.Devices/GetDevice"
	Devices_UpdateDevice_FullMethodName = "/gen.Devices/UpdateDevice"
	Devices_DeleteDevice_FullMethodName = "/gen.Devices/DeleteDevice"
)

// DevicesClient is the client API for Devices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DevicesClient interface {
	ListDevices(ctx context.Context, in *SSO_ListDevicesRequest, opts ...grpc.CallOption) (*SSO_ListDevicesResponse, error)
	GetDevice(ctx context.Context, in *SSO_StringMsg, opts ...grpc.CallOption) (*SSO_Device, error)
	UpdateDevice(ctx context.Context, in *SSO_UpdateDeviceRequest, opts ...grpc.CallOption) (*SSO_Empty, error)
	DeleteDevice(ctx context.Context, in *SSO_StringMsg, opts ...grpc.CallOption) (*SSO_Empty, error)
}

type devicesClient struct {
	cc grpc.ClientConnInterface
}

func NewDevicesClient(cc grpc.ClientConnInterface) DevicesClient {
	return &devicesClient{cc}
}

func (c *devicesClient) ListDevices(ctx context.Context, in *SSO_ListDevicesRequest, opts ...grpc.CallOption) (*SSO_ListDevicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SSO_ListDevicesResponse)
	err := c.cc.Invoke(ctx, Devices_ListDevices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesClient) GetDevice(ctx context.Context, in *SSO_StringMsg, opts ...grpc.CallOption) (*SSO_Device, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SSO_Device)
	err := c.cc.Invoke(ctx, Devices_GetDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesClient) UpdateDevice(ctx context.Context, in *SSO_UpdateDeviceRequest, opts ...grpc.CallOption) (*SSO_Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SSO_Empty)
	err := c.cc.Invoke(ctx, Devices_UpdateDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesClient) DeleteDevice(ctx context.Context, in *SSO_StringMsg, opts ...grpc.CallOption) (*SSO_Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SSO_Empty)
	err := c.cc.Invoke(ctx, Devices_DeleteDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DevicesServer is the server API for Devices service.
// All implementations must embed UnimplementedDevicesServer
// for forward compatibility.
type DevicesServer interface {
	ListDevices(context.Context, *SSO_ListDevicesRequest) (*SSO_ListDevicesResponse, error)
	GetDevice(context.Context, *SSO_StringMsg) (*SSO_Device, error)
	UpdateDevice(context.Context, *SSO_UpdateDeviceRequest) (*SSO_Empty, error)
	DeleteDevice(context.Context, *SSO_StringMsg) (*SSO_Empty, error)
	mustEmbedUnimplementedDevicesServer()
}

// UnimplementedDevicesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDevicesServer struct{}

func (UnimplementedDevicesServer) ListDevices(context.Context, *SSO_ListDevicesRequest) (*SSO_ListDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDevices not implemented")
}
func (UnimplementedDevicesServer) GetDevice(context.Context, *SSO_StringMsg) (*SSO_Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevice not implemented")
}
func (UnimplementedDevicesServer) UpdateDevice(context.Context, *SSO_UpdateDeviceRequest) (*SSO_Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDevice not implemented")
}
func (UnimplementedDevicesServer) DeleteDevice(context.Context, *SSO_StringMsg) (*SSO_Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDevice not implemented")
}
func (UnimplementedDevicesServer) mustEmbedUnimplementedDevicesServer() {}
func (UnimplementedDevicesServer) testEmbeddedByValue()                 {}

// UnsafeDevicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DevicesServer will
// result in compilation errors.
type UnsafeDevicesServer interface {
	mustEmbedUnimplementedDevicesServer()
}

func RegisterDevicesServer(s grpc.ServiceRegistrar, srv DevicesServer) {
	// If the following call pancis, it indicates UnimplementedDevicesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Devices_ServiceDesc, srv)
}

func _Devices_ListDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSO_ListDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServer).ListDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Devices_ListDevices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServer).ListDevices(ctx, req.(*SSO_ListDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devices_GetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSO_StringMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServer).GetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Devices_GetDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServer).GetDevice(ctx, req.(*SSO_StringMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devices_UpdateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSO_UpdateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServer).UpdateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Devices_UpdateDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServer).UpdateDevice(ctx, req.(*SSO_UpdateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devices_DeleteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSO_StringMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServer).DeleteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Devices_DeleteDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServer).DeleteDevice(ctx, req.(*SSO_StringMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// Devices_ServiceDesc is the grpc.ServiceDesc for Devices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Devices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gen.Devices",
	HandlerType: (*DevicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDevices",
			Handler:    _Devices_ListDevices_Handler,
		},
		{
			MethodName: "GetDevice",
			Handler:    _Devices_GetDevice_Handler,
		},
		{
			MethodName: "UpdateDevice",
			Handler:    _Devices_UpdateDevice_Handler,
		},
		{
			MethodName: "DeleteDevice",
			Handler:    _Devices_DeleteDevice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/grpc/v1/gen/sso.proto",
}
