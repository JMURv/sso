// Code generated by MockGen. DO NOT EDIT.
// Source: grpc.go
//
// Generated by this command:
//
//	mockgen -source=grpc.go -destination=mocks/mock_repos.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/JMURv/sso/pkg/model"
	utils "github.com/JMURv/sso/pkg/utils/http"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockCtrl is a mock of Ctrl interface.
type MockCtrl struct {
	ctrl     *gomock.Controller
	recorder *MockCtrlMockRecorder
}

// MockCtrlMockRecorder is the mock recorder for MockCtrl.
type MockCtrlMockRecorder struct {
	mock *MockCtrl
}

// NewMockCtrl creates a new mock instance.
func NewMockCtrl(ctrl *gomock.Controller) *MockCtrl {
	mock := &MockCtrl{ctrl: ctrl}
	mock.recorder = &MockCtrlMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCtrl) EXPECT() *MockCtrlMockRecorder {
	return m.recorder
}

// CheckForgotPasswordEmail mocks base method.
func (m *MockCtrl) CheckForgotPasswordEmail(ctx context.Context, password string, uid uuid.UUID, code int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckForgotPasswordEmail", ctx, password, uid, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckForgotPasswordEmail indicates an expected call of CheckForgotPasswordEmail.
func (mr *MockCtrlMockRecorder) CheckForgotPasswordEmail(ctx, password, uid, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckForgotPasswordEmail", reflect.TypeOf((*MockCtrl)(nil).CheckForgotPasswordEmail), ctx, password, uid, code)
}

// CheckLoginCode mocks base method.
func (m *MockCtrl) CheckLoginCode(ctx context.Context, email string, code int) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckLoginCode", ctx, email, code)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckLoginCode indicates an expected call of CheckLoginCode.
func (mr *MockCtrlMockRecorder) CheckLoginCode(ctx, email, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckLoginCode", reflect.TypeOf((*MockCtrl)(nil).CheckLoginCode), ctx, email, code)
}

// CreateUser mocks base method.
func (m *MockCtrl) CreateUser(ctx context.Context, u *model.User, fileName string, bytes []byte) (*model.User, string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, u, fileName, bytes)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockCtrlMockRecorder) CreateUser(ctx, u, fileName, bytes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockCtrl)(nil).CreateUser), ctx, u, fileName, bytes)
}

// DeleteUser mocks base method.
func (m *MockCtrl) DeleteUser(ctx context.Context, userID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockCtrlMockRecorder) DeleteUser(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockCtrl)(nil).DeleteUser), ctx, userID)
}

// GetUserByEmail mocks base method.
func (m *MockCtrl) GetUserByEmail(ctx context.Context, email string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockCtrlMockRecorder) GetUserByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockCtrl)(nil).GetUserByEmail), ctx, email)
}

// GetUserByID mocks base method.
func (m *MockCtrl) GetUserByID(ctx context.Context, userID uuid.UUID) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, userID)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockCtrlMockRecorder) GetUserByID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockCtrl)(nil).GetUserByID), ctx, userID)
}

// IsUserExist mocks base method.
func (m *MockCtrl) IsUserExist(ctx context.Context, email string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserExist", ctx, email)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUserExist indicates an expected call of IsUserExist.
func (mr *MockCtrlMockRecorder) IsUserExist(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserExist", reflect.TypeOf((*MockCtrl)(nil).IsUserExist), ctx, email)
}

// ListUsers mocks base method.
func (m *MockCtrl) ListUsers(ctx context.Context, page, size int) (*utils.PaginatedData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", ctx, page, size)
	ret0, _ := ret[0].(*utils.PaginatedData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockCtrlMockRecorder) ListUsers(ctx, page, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockCtrl)(nil).ListUsers), ctx, page, size)
}

// SendForgotPasswordEmail mocks base method.
func (m *MockCtrl) SendForgotPasswordEmail(ctx context.Context, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendForgotPasswordEmail", ctx, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendForgotPasswordEmail indicates an expected call of SendForgotPasswordEmail.
func (mr *MockCtrlMockRecorder) SendForgotPasswordEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendForgotPasswordEmail", reflect.TypeOf((*MockCtrl)(nil).SendForgotPasswordEmail), ctx, email)
}

// SendLoginCode mocks base method.
func (m *MockCtrl) SendLoginCode(ctx context.Context, email, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendLoginCode", ctx, email, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendLoginCode indicates an expected call of SendLoginCode.
func (mr *MockCtrlMockRecorder) SendLoginCode(ctx, email, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendLoginCode", reflect.TypeOf((*MockCtrl)(nil).SendLoginCode), ctx, email, password)
}

// SendSupportEmail mocks base method.
func (m *MockCtrl) SendSupportEmail(ctx context.Context, uid uuid.UUID, theme, text string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSupportEmail", ctx, uid, theme, text)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendSupportEmail indicates an expected call of SendSupportEmail.
func (mr *MockCtrlMockRecorder) SendSupportEmail(ctx, uid, theme, text any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSupportEmail", reflect.TypeOf((*MockCtrl)(nil).SendSupportEmail), ctx, uid, theme, text)
}

// UpdateUser mocks base method.
func (m *MockCtrl) UpdateUser(ctx context.Context, userID uuid.UUID, newData *model.User) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, userID, newData)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockCtrlMockRecorder) UpdateUser(ctx, userID, newData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockCtrl)(nil).UpdateUser), ctx, userID, newData)
}

// UserSearch mocks base method.
func (m *MockCtrl) UserSearch(ctx context.Context, query string, page, size int) (*utils.PaginatedData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserSearch", ctx, query, page, size)
	ret0, _ := ret[0].(*utils.PaginatedData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserSearch indicates an expected call of UserSearch.
func (mr *MockCtrlMockRecorder) UserSearch(ctx, query, page, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserSearch", reflect.TypeOf((*MockCtrl)(nil).UserSearch), ctx, query, page, size)
}
