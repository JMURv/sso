services:
  redis:
    container_name: redis
    restart: always
    image: redis:alpine
    ports:
      - "6379:6379"
    networks: [app]

  db:
    container_name: db
    image: postgres:15.0-alpine
    restart: always
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
    ports:
      - "${POSTGRES_PORT}:5432"
    healthcheck:
      test: 'psql -w -U ${POSTGRES_USER} -d ${POSTGRES_DB} -h localhost -c "SELECT 1"'
      interval: 5s
      timeout: 2s
      retries: 5
      start_period: 5s
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks: [app]

  app:
    container_name: app
    restart: unless-stopped
    build:
      context: ../../
      dockerfile: build/docker/Dockerfile
    volumes:
      - ../../configs/dev.config.yaml:/app/configs/local.config.yaml
    ports:
      - "${APP_PORT}:${APP_PORT}"
      - "${APP_METRICS_PORT}:${APP_METRICS_PORT}"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${APP_PORT}/health" ]
      interval: 5s
      timeout: 5s
      retries: 3
    depends_on:
      db:
        condition: service_healthy
        restart: true
      redis:
        condition: service_started
    networks: [app]

volumes:
  pgdata:

networks:
  app:
    name: app