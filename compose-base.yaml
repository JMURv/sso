name: sso
services:
  caddy:
    image: caddy:2.9.1-alpine
    container_name: caddy
    restart: unless-stopped
    environment:
      BACKEND_PORT: "${BACKEND_PORT}"
      FRONTEND_PORT: "${FRONTEND_PORT}"
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp"
      - "2019:2019"
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_started
      minio:
        condition: service_healthy
    volumes:
      - ./configs/caddy/Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    networks: [ sso ]

  redis:
    extends:
      file: backend/build/compose/dc.base.yaml
      service: redis

  db:
    extends:
      file: backend/build/compose/dc.base.yaml
      service: db

  minio:
    extends:
      file: backend/build/compose/dc.base.yaml
      service: minio

  backend:
    image: sso-backend:latest
    build:
      context: ./backend
      dockerfile: ./build/docker/Dockerfile
    env_file: ./configs/envs/.env
    extends:
      file: backend/build/compose/dc.base.yaml
      service: backend

  frontend:
    container_name: frontend
    restart: unless-stopped
    image: sso-frontend:latest
    build:
      context: ./frontend
      dockerfile: ./Dockerfile
    environment:
      BACKEND_URL: "http://caddy"
      NEXT_PUBLIC_RECAPTCHA_SITE_KEY: "${CAPTCHA_SITE_KEY}"
      NEXT_PUBLIC_RECAPTCHA_SECRET_KEY: "${CAPTCHA_SECRET}"
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    depends_on:
      backend:
        condition: service_healthy
        restart: true
    networks: [ sso ]

  jaeger:
    container_name: jaeger
    image: jaegertracing/all-in-one:latest
    restart: unless-stopped
    ports:
      - "14268:14268"
      - "16686:16686"
      - "6831:6831/udp"
    networks: [ sso ]

  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./configs/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks: [ sso ]

  node-exp:
    container_name: node-exp
    image: prom/node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    networks: [ sso ]

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    restart: unless-stopped
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana/provisioning:/etc/grafana/provisioning:ro
    networks: [ sso ]

  loki:
    container_name: loki
    image: grafana/loki:latest
    restart: unless-stopped
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/loki-config.yaml
    volumes:
      - loki_data:/loki
      - ./configs/loki:/etc/loki
    networks: [ sso ]

  promtail:
    container_name: promtail
    image: grafana/promtail:latest
    restart: unless-stopped
    volumes:
      - ./configs/promtail:/etc/promtail
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: -config.file=/etc/promtail/promtail-config.yaml
    depends_on:
      - loki
    networks: [ sso ]

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    environment:
      DATA_SOURCE_NAME: "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?sslmode=disable"
    ports:
      - "9187:9187"
    depends_on:
      db:
        condition: service_healthy
    networks: [ sso ]

  redis-exporter:
    image: oliver006/redis_exporter:v1.43.0
    environment:
      - REDIS_ADDR=redis:6379
    ports:
      - "9121:9121"
    depends_on:
      redis:
        condition: service_started
    networks: [ sso ]

volumes:
  pg_data:
  minio_data:
  redis_data:
  prometheus_data:
  grafana_data:
  loki_data:
  caddy_data:
  caddy_config:

networks:
  sso:
    name: sso