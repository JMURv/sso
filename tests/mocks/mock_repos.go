// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/controller/ctrl.go
//
// Generated by this command:
//
//	mockgen -source=./internal/controller/ctrl.go -destination=mocks/mock_repos.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	model "github.com/JMURv/sso/pkg/model"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockAppRepo is a mock of AppRepo interface.
type MockAppRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAppRepoMockRecorder
	isgomock struct{}
}

// MockAppRepoMockRecorder is the mock recorder for MockAppRepo.
type MockAppRepoMockRecorder struct {
	mock *MockAppRepo
}

// NewMockAppRepo creates a new mock instance.
func NewMockAppRepo(ctrl *gomock.Controller) *MockAppRepo {
	mock := &MockAppRepo{ctrl: ctrl}
	mock.recorder = &MockAppRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppRepo) EXPECT() *MockAppRepoMockRecorder {
	return m.recorder
}

// CreatePerm mocks base method.
func (m *MockAppRepo) CreatePerm(ctx context.Context, req *model.Permission) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePerm", ctx, req)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePerm indicates an expected call of CreatePerm.
func (mr *MockAppRepoMockRecorder) CreatePerm(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePerm", reflect.TypeOf((*MockAppRepo)(nil).CreatePerm), ctx, req)
}

// CreateUser mocks base method.
func (m *MockAppRepo) CreateUser(ctx context.Context, req *model.User) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, req)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAppRepoMockRecorder) CreateUser(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAppRepo)(nil).CreateUser), ctx, req)
}

// DeletePerm mocks base method.
func (m *MockAppRepo) DeletePerm(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePerm", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePerm indicates an expected call of DeletePerm.
func (mr *MockAppRepoMockRecorder) DeletePerm(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePerm", reflect.TypeOf((*MockAppRepo)(nil).DeletePerm), ctx, id)
}

// DeleteUser mocks base method.
func (m *MockAppRepo) DeleteUser(ctx context.Context, userID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockAppRepoMockRecorder) DeleteUser(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockAppRepo)(nil).DeleteUser), ctx, userID)
}

// GetPermission mocks base method.
func (m *MockAppRepo) GetPermission(ctx context.Context, id uint64) (*model.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermission", ctx, id)
	ret0, _ := ret[0].(*model.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermission indicates an expected call of GetPermission.
func (mr *MockAppRepoMockRecorder) GetPermission(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermission", reflect.TypeOf((*MockAppRepo)(nil).GetPermission), ctx, id)
}

// GetUserByEmail mocks base method.
func (m *MockAppRepo) GetUserByEmail(ctx context.Context, email string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockAppRepoMockRecorder) GetUserByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockAppRepo)(nil).GetUserByEmail), ctx, email)
}

// GetUserByID mocks base method.
func (m *MockAppRepo) GetUserByID(ctx context.Context, userID uuid.UUID) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, userID)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockAppRepoMockRecorder) GetUserByID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockAppRepo)(nil).GetUserByID), ctx, userID)
}

// ListPermissions mocks base method.
func (m *MockAppRepo) ListPermissions(ctx context.Context, page, size int) (*model.PaginatedPermission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPermissions", ctx, page, size)
	ret0, _ := ret[0].(*model.PaginatedPermission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPermissions indicates an expected call of ListPermissions.
func (mr *MockAppRepoMockRecorder) ListPermissions(ctx, page, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissions", reflect.TypeOf((*MockAppRepo)(nil).ListPermissions), ctx, page, size)
}

// ListUsers mocks base method.
func (m *MockAppRepo) ListUsers(ctx context.Context, page, size int) (*model.PaginatedUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", ctx, page, size)
	ret0, _ := ret[0].(*model.PaginatedUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockAppRepoMockRecorder) ListUsers(ctx, page, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockAppRepo)(nil).ListUsers), ctx, page, size)
}

// SearchUser mocks base method.
func (m *MockAppRepo) SearchUser(ctx context.Context, query string, page, size int) (*model.PaginatedUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchUser", ctx, query, page, size)
	ret0, _ := ret[0].(*model.PaginatedUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchUser indicates an expected call of SearchUser.
func (mr *MockAppRepoMockRecorder) SearchUser(ctx, query, page, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchUser", reflect.TypeOf((*MockAppRepo)(nil).SearchUser), ctx, query, page, size)
}

// UpdatePerm mocks base method.
func (m *MockAppRepo) UpdatePerm(ctx context.Context, id uint64, req *model.Permission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePerm", ctx, id, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePerm indicates an expected call of UpdatePerm.
func (mr *MockAppRepoMockRecorder) UpdatePerm(ctx, id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePerm", reflect.TypeOf((*MockAppRepo)(nil).UpdatePerm), ctx, id, req)
}

// UpdateUser mocks base method.
func (m *MockAppRepo) UpdateUser(ctx context.Context, id uuid.UUID, req *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, id, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockAppRepoMockRecorder) UpdateUser(ctx, id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockAppRepo)(nil).UpdateUser), ctx, id, req)
}

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
	isgomock struct{}
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// NewToken mocks base method.
func (m *MockAuthService) NewToken(u *model.User, d time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewToken", u, d)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewToken indicates an expected call of NewToken.
func (mr *MockAuthServiceMockRecorder) NewToken(u, d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewToken", reflect.TypeOf((*MockAuthService)(nil).NewToken), u, d)
}

// VerifyToken mocks base method.
func (m *MockAuthService) VerifyToken(tokenStr string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", tokenStr)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyToken indicates an expected call of VerifyToken.
func (mr *MockAuthServiceMockRecorder) VerifyToken(tokenStr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockAuthService)(nil).VerifyToken), tokenStr)
}

// MockCacheService is a mock of CacheService interface.
type MockCacheService struct {
	ctrl     *gomock.Controller
	recorder *MockCacheServiceMockRecorder
	isgomock struct{}
}

// MockCacheServiceMockRecorder is the mock recorder for MockCacheService.
type MockCacheServiceMockRecorder struct {
	mock *MockCacheService
}

// NewMockCacheService creates a new mock instance.
func NewMockCacheService(ctrl *gomock.Controller) *MockCacheService {
	mock := &MockCacheService{ctrl: ctrl}
	mock.recorder = &MockCacheServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheService) EXPECT() *MockCacheServiceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockCacheService) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockCacheServiceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCacheService)(nil).Close))
}

// Delete mocks base method.
func (m *MockCacheService) Delete(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCacheServiceMockRecorder) Delete(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCacheService)(nil).Delete), ctx, key)
}

// GetCode mocks base method.
func (m *MockCacheService) GetCode(ctx context.Context, key string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCode", ctx, key)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCode indicates an expected call of GetCode.
func (mr *MockCacheServiceMockRecorder) GetCode(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCode", reflect.TypeOf((*MockCacheService)(nil).GetCode), ctx, key)
}

// GetToStruct mocks base method.
func (m *MockCacheService) GetToStruct(ctx context.Context, key string, dest any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToStruct", ctx, key, dest)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetToStruct indicates an expected call of GetToStruct.
func (mr *MockCacheServiceMockRecorder) GetToStruct(ctx, key, dest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToStruct", reflect.TypeOf((*MockCacheService)(nil).GetToStruct), ctx, key, dest)
}

// InvalidateKeysByPattern mocks base method.
func (m *MockCacheService) InvalidateKeysByPattern(ctx context.Context, pattern string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InvalidateKeysByPattern", ctx, pattern)
}

// InvalidateKeysByPattern indicates an expected call of InvalidateKeysByPattern.
func (mr *MockCacheServiceMockRecorder) InvalidateKeysByPattern(ctx, pattern any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateKeysByPattern", reflect.TypeOf((*MockCacheService)(nil).InvalidateKeysByPattern), ctx, pattern)
}

// Set mocks base method.
func (m *MockCacheService) Set(ctx context.Context, t time.Duration, key string, val any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, t, key, val)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockCacheServiceMockRecorder) Set(ctx, t, key, val any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCacheService)(nil).Set), ctx, t, key, val)
}

// MockEmailService is a mock of EmailService interface.
type MockEmailService struct {
	ctrl     *gomock.Controller
	recorder *MockEmailServiceMockRecorder
	isgomock struct{}
}

// MockEmailServiceMockRecorder is the mock recorder for MockEmailService.
type MockEmailServiceMockRecorder struct {
	mock *MockEmailService
}

// NewMockEmailService creates a new mock instance.
func NewMockEmailService(ctrl *gomock.Controller) *MockEmailService {
	mock := &MockEmailService{ctrl: ctrl}
	mock.recorder = &MockEmailServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailService) EXPECT() *MockEmailServiceMockRecorder {
	return m.recorder
}

// SendForgotPasswordEmail mocks base method.
func (m *MockEmailService) SendForgotPasswordEmail(ctx context.Context, token, uid64, toEmail string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendForgotPasswordEmail", ctx, token, uid64, toEmail)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendForgotPasswordEmail indicates an expected call of SendForgotPasswordEmail.
func (mr *MockEmailServiceMockRecorder) SendForgotPasswordEmail(ctx, token, uid64, toEmail any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendForgotPasswordEmail", reflect.TypeOf((*MockEmailService)(nil).SendForgotPasswordEmail), ctx, token, uid64, toEmail)
}

// SendLoginEmail mocks base method.
func (m *MockEmailService) SendLoginEmail(ctx context.Context, code int, toEmail string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendLoginEmail", ctx, code, toEmail)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendLoginEmail indicates an expected call of SendLoginEmail.
func (mr *MockEmailServiceMockRecorder) SendLoginEmail(ctx, code, toEmail any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendLoginEmail", reflect.TypeOf((*MockEmailService)(nil).SendLoginEmail), ctx, code, toEmail)
}

// SendOptFile mocks base method.
func (m *MockEmailService) SendOptFile(arg0 context.Context, email, filename string, bytes []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendOptFile", arg0, email, filename, bytes)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendOptFile indicates an expected call of SendOptFile.
func (mr *MockEmailServiceMockRecorder) SendOptFile(arg0, email, filename, bytes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOptFile", reflect.TypeOf((*MockEmailService)(nil).SendOptFile), arg0, email, filename, bytes)
}

// SendSupportEmail mocks base method.
func (m *MockEmailService) SendSupportEmail(ctx context.Context, u *model.User, theme, text string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSupportEmail", ctx, u, theme, text)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendSupportEmail indicates an expected call of SendSupportEmail.
func (mr *MockEmailServiceMockRecorder) SendSupportEmail(ctx, u, theme, text any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSupportEmail", reflect.TypeOf((*MockEmailService)(nil).SendSupportEmail), ctx, u, theme, text)
}

// SendUserCredentials mocks base method.
func (m *MockEmailService) SendUserCredentials(arg0 context.Context, email, pass string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendUserCredentials", arg0, email, pass)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendUserCredentials indicates an expected call of SendUserCredentials.
func (mr *MockEmailServiceMockRecorder) SendUserCredentials(arg0, email, pass any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendUserCredentials", reflect.TypeOf((*MockEmailService)(nil).SendUserCredentials), arg0, email, pass)
}
