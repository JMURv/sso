// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/ctrl/ctrl.go
//
// Generated by this command:
//
//	mockgen -source=./internal/ctrl/ctrl.go -destination=tests/mocks/mock_ctrl.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	http "net/http"
	reflect "reflect"
	time "time"

	jwt "github.com/JMURv/sso/internal/auth/jwt"
	webauthn "github.com/JMURv/sso/internal/auth/webauthn"
	dto "github.com/JMURv/sso/internal/dto"
	models "github.com/JMURv/sso/internal/models"
	s3 "github.com/JMURv/sso/internal/repo/s3"
	protocol "github.com/go-webauthn/webauthn/protocol"
	webauthn0 "github.com/go-webauthn/webauthn/webauthn"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockAppRepo is a mock of AppRepo interface.
type MockAppRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAppRepoMockRecorder
	isgomock struct{}
}

// MockAppRepoMockRecorder is the mock recorder for MockAppRepo.
type MockAppRepoMockRecorder struct {
	mock *MockAppRepo
}

// NewMockAppRepo creates a new mock instance.
func NewMockAppRepo(ctrl *gomock.Controller) *MockAppRepo {
	mock := &MockAppRepo{ctrl: ctrl}
	mock.recorder = &MockAppRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppRepo) EXPECT() *MockAppRepoMockRecorder {
	return m.recorder
}

// CreateOAuth2Connection mocks base method.
func (m *MockAppRepo) CreateOAuth2Connection(ctx context.Context, userID uuid.UUID, provider string, data *dto.ProviderResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOAuth2Connection", ctx, userID, provider, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOAuth2Connection indicates an expected call of CreateOAuth2Connection.
func (mr *MockAppRepoMockRecorder) CreateOAuth2Connection(ctx, userID, provider, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOAuth2Connection", reflect.TypeOf((*MockAppRepo)(nil).CreateOAuth2Connection), ctx, userID, provider, data)
}

// CreatePerm mocks base method.
func (m *MockAppRepo) CreatePerm(ctx context.Context, req *dto.CreatePermissionRequest) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePerm", ctx, req)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePerm indicates an expected call of CreatePerm.
func (mr *MockAppRepoMockRecorder) CreatePerm(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePerm", reflect.TypeOf((*MockAppRepo)(nil).CreatePerm), ctx, req)
}

// CreateRole mocks base method.
func (m *MockAppRepo) CreateRole(ctx context.Context, req *dto.CreateRoleRequest) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", ctx, req)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockAppRepoMockRecorder) CreateRole(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockAppRepo)(nil).CreateRole), ctx, req)
}

// CreateToken mocks base method.
func (m *MockAppRepo) CreateToken(ctx context.Context, userID uuid.UUID, hashedT string, expiresAt time.Time, device *models.Device) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", ctx, userID, hashedT, expiresAt, device)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockAppRepoMockRecorder) CreateToken(ctx, userID, hashedT, expiresAt, device any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockAppRepo)(nil).CreateToken), ctx, userID, hashedT, expiresAt, device)
}

// CreateUser mocks base method.
func (m *MockAppRepo) CreateUser(ctx context.Context, req *dto.CreateUserRequest) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, req)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAppRepoMockRecorder) CreateUser(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAppRepo)(nil).CreateUser), ctx, req)
}

// CreateWACredential mocks base method.
func (m *MockAppRepo) CreateWACredential(ctx context.Context, userID uuid.UUID, cred *webauthn0.Credential) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWACredential", ctx, userID, cred)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWACredential indicates an expected call of CreateWACredential.
func (mr *MockAppRepoMockRecorder) CreateWACredential(ctx, userID, cred any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWACredential", reflect.TypeOf((*MockAppRepo)(nil).CreateWACredential), ctx, userID, cred)
}

// DeleteDevice mocks base method.
func (m *MockAppRepo) DeleteDevice(ctx context.Context, uid uuid.UUID, deviceID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDevice", ctx, uid, deviceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDevice indicates an expected call of DeleteDevice.
func (mr *MockAppRepoMockRecorder) DeleteDevice(ctx, uid, deviceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDevice", reflect.TypeOf((*MockAppRepo)(nil).DeleteDevice), ctx, uid, deviceID)
}

// DeletePerm mocks base method.
func (m *MockAppRepo) DeletePerm(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePerm", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePerm indicates an expected call of DeletePerm.
func (mr *MockAppRepoMockRecorder) DeletePerm(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePerm", reflect.TypeOf((*MockAppRepo)(nil).DeletePerm), ctx, id)
}

// DeleteRole mocks base method.
func (m *MockAppRepo) DeleteRole(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *MockAppRepoMockRecorder) DeleteRole(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockAppRepo)(nil).DeleteRole), ctx, id)
}

// DeleteUser mocks base method.
func (m *MockAppRepo) DeleteUser(ctx context.Context, userID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockAppRepoMockRecorder) DeleteUser(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockAppRepo)(nil).DeleteUser), ctx, userID)
}

// GetByDevice mocks base method.
func (m *MockAppRepo) GetByDevice(ctx context.Context, userID uuid.UUID, deviceID string) (*models.RefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByDevice", ctx, userID, deviceID)
	ret0, _ := ret[0].(*models.RefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByDevice indicates an expected call of GetByDevice.
func (mr *MockAppRepoMockRecorder) GetByDevice(ctx, userID, deviceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByDevice", reflect.TypeOf((*MockAppRepo)(nil).GetByDevice), ctx, userID, deviceID)
}

// GetDevice mocks base method.
func (m *MockAppRepo) GetDevice(ctx context.Context, uid uuid.UUID, dID string) (*models.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevice", ctx, uid, dID)
	ret0, _ := ret[0].(*models.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevice indicates an expected call of GetDevice.
func (mr *MockAppRepoMockRecorder) GetDevice(ctx, uid, dID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevice", reflect.TypeOf((*MockAppRepo)(nil).GetDevice), ctx, uid, dID)
}

// GetDeviceByID mocks base method.
func (m *MockAppRepo) GetDeviceByID(ctx context.Context, dID string) (*models.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceByID", ctx, dID)
	ret0, _ := ret[0].(*models.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceByID indicates an expected call of GetDeviceByID.
func (mr *MockAppRepoMockRecorder) GetDeviceByID(ctx, dID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceByID", reflect.TypeOf((*MockAppRepo)(nil).GetDeviceByID), ctx, dID)
}

// GetPermission mocks base method.
func (m *MockAppRepo) GetPermission(ctx context.Context, id uint64) (*models.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermission", ctx, id)
	ret0, _ := ret[0].(*models.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermission indicates an expected call of GetPermission.
func (mr *MockAppRepoMockRecorder) GetPermission(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermission", reflect.TypeOf((*MockAppRepo)(nil).GetPermission), ctx, id)
}

// GetRole mocks base method.
func (m *MockAppRepo) GetRole(ctx context.Context, id uint64) (*models.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRole", ctx, id)
	ret0, _ := ret[0].(*models.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRole indicates an expected call of GetRole.
func (mr *MockAppRepoMockRecorder) GetRole(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockAppRepo)(nil).GetRole), ctx, id)
}

// GetUserByEmail mocks base method.
func (m *MockAppRepo) GetUserByEmail(ctx context.Context, email string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockAppRepoMockRecorder) GetUserByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockAppRepo)(nil).GetUserByEmail), ctx, email)
}

// GetUserByID mocks base method.
func (m *MockAppRepo) GetUserByID(ctx context.Context, userID uuid.UUID) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, userID)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockAppRepoMockRecorder) GetUserByID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockAppRepo)(nil).GetUserByID), ctx, userID)
}

// GetUserByOAuth2 mocks base method.
func (m *MockAppRepo) GetUserByOAuth2(ctx context.Context, provider, providerID string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByOAuth2", ctx, provider, providerID)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByOAuth2 indicates an expected call of GetUserByOAuth2.
func (mr *MockAppRepoMockRecorder) GetUserByOAuth2(ctx, provider, providerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByOAuth2", reflect.TypeOf((*MockAppRepo)(nil).GetUserByOAuth2), ctx, provider, providerID)
}

// GetWACredentials mocks base method.
func (m *MockAppRepo) GetWACredentials(ctx context.Context, userID uuid.UUID) ([]webauthn0.Credential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWACredentials", ctx, userID)
	ret0, _ := ret[0].([]webauthn0.Credential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWACredentials indicates an expected call of GetWACredentials.
func (mr *MockAppRepoMockRecorder) GetWACredentials(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWACredentials", reflect.TypeOf((*MockAppRepo)(nil).GetWACredentials), ctx, userID)
}

// IsTokenValid mocks base method.
func (m *MockAppRepo) IsTokenValid(ctx context.Context, userID uuid.UUID, d *models.Device, token string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTokenValid", ctx, userID, d, token)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsTokenValid indicates an expected call of IsTokenValid.
func (mr *MockAppRepoMockRecorder) IsTokenValid(ctx, userID, d, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTokenValid", reflect.TypeOf((*MockAppRepo)(nil).IsTokenValid), ctx, userID, d, token)
}

// ListDevices mocks base method.
func (m *MockAppRepo) ListDevices(ctx context.Context, uid uuid.UUID) ([]models.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDevices", ctx, uid)
	ret0, _ := ret[0].([]models.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDevices indicates an expected call of ListDevices.
func (mr *MockAppRepoMockRecorder) ListDevices(ctx, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDevices", reflect.TypeOf((*MockAppRepo)(nil).ListDevices), ctx, uid)
}

// ListPermissions mocks base method.
func (m *MockAppRepo) ListPermissions(ctx context.Context, page, size int, filters map[string]any) (*dto.PaginatedPermissionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPermissions", ctx, page, size, filters)
	ret0, _ := ret[0].(*dto.PaginatedPermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPermissions indicates an expected call of ListPermissions.
func (mr *MockAppRepoMockRecorder) ListPermissions(ctx, page, size, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissions", reflect.TypeOf((*MockAppRepo)(nil).ListPermissions), ctx, page, size, filters)
}

// ListRoles mocks base method.
func (m *MockAppRepo) ListRoles(ctx context.Context, page, size int, filters map[string]any) (*dto.PaginatedRoleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoles", ctx, page, size, filters)
	ret0, _ := ret[0].(*dto.PaginatedRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoles indicates an expected call of ListRoles.
func (mr *MockAppRepoMockRecorder) ListRoles(ctx, page, size, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoles", reflect.TypeOf((*MockAppRepo)(nil).ListRoles), ctx, page, size, filters)
}

// ListUsers mocks base method.
func (m *MockAppRepo) ListUsers(ctx context.Context, page, size int, filters map[string]any) (*dto.PaginatedUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", ctx, page, size, filters)
	ret0, _ := ret[0].(*dto.PaginatedUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockAppRepoMockRecorder) ListUsers(ctx, page, size, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockAppRepo)(nil).ListUsers), ctx, page, size, filters)
}

// RevokeAllTokens mocks base method.
func (m *MockAppRepo) RevokeAllTokens(ctx context.Context, userID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeAllTokens", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeAllTokens indicates an expected call of RevokeAllTokens.
func (mr *MockAppRepoMockRecorder) RevokeAllTokens(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeAllTokens", reflect.TypeOf((*MockAppRepo)(nil).RevokeAllTokens), ctx, userID)
}

// RevokeByDevice mocks base method.
func (m *MockAppRepo) RevokeByDevice(ctx context.Context, userID uuid.UUID, deviceID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeByDevice", ctx, userID, deviceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeByDevice indicates an expected call of RevokeByDevice.
func (mr *MockAppRepoMockRecorder) RevokeByDevice(ctx, userID, deviceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeByDevice", reflect.TypeOf((*MockAppRepo)(nil).RevokeByDevice), ctx, userID, deviceID)
}

// UpdateDevice mocks base method.
func (m *MockAppRepo) UpdateDevice(ctx context.Context, uid uuid.UUID, dID string, req *dto.UpdateDeviceRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDevice", ctx, uid, dID, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDevice indicates an expected call of UpdateDevice.
func (mr *MockAppRepoMockRecorder) UpdateDevice(ctx, uid, dID, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDevice", reflect.TypeOf((*MockAppRepo)(nil).UpdateDevice), ctx, uid, dID, req)
}

// UpdateMe mocks base method.
func (m *MockAppRepo) UpdateMe(ctx context.Context, id uuid.UUID, req *dto.UpdateUserRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMe", ctx, id, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMe indicates an expected call of UpdateMe.
func (mr *MockAppRepoMockRecorder) UpdateMe(ctx, id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMe", reflect.TypeOf((*MockAppRepo)(nil).UpdateMe), ctx, id, req)
}

// UpdatePerm mocks base method.
func (m *MockAppRepo) UpdatePerm(ctx context.Context, id uint64, req *dto.UpdatePermissionRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePerm", ctx, id, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePerm indicates an expected call of UpdatePerm.
func (mr *MockAppRepoMockRecorder) UpdatePerm(ctx, id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePerm", reflect.TypeOf((*MockAppRepo)(nil).UpdatePerm), ctx, id, req)
}

// UpdateRole mocks base method.
func (m *MockAppRepo) UpdateRole(ctx context.Context, id uint64, req *dto.UpdateRoleRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRole", ctx, id, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRole indicates an expected call of UpdateRole.
func (mr *MockAppRepoMockRecorder) UpdateRole(ctx, id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockAppRepo)(nil).UpdateRole), ctx, id, req)
}

// UpdateUser mocks base method.
func (m *MockAppRepo) UpdateUser(ctx context.Context, id uuid.UUID, req *dto.UpdateUserRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, id, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockAppRepoMockRecorder) UpdateUser(ctx, id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockAppRepo)(nil).UpdateUser), ctx, id, req)
}

// UpdateWACredential mocks base method.
func (m *MockAppRepo) UpdateWACredential(ctx context.Context, cred *webauthn0.Credential) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWACredential", ctx, cred)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWACredential indicates an expected call of UpdateWACredential.
func (mr *MockAppRepoMockRecorder) UpdateWACredential(ctx, cred any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWACredential", reflect.TypeOf((*MockAppRepo)(nil).UpdateWACredential), ctx, cred)
}

// MockAppCtrl is a mock of AppCtrl interface.
type MockAppCtrl struct {
	ctrl     *gomock.Controller
	recorder *MockAppCtrlMockRecorder
	isgomock struct{}
}

// MockAppCtrlMockRecorder is the mock recorder for MockAppCtrl.
type MockAppCtrlMockRecorder struct {
	mock *MockAppCtrl
}

// NewMockAppCtrl creates a new mock instance.
func NewMockAppCtrl(ctrl *gomock.Controller) *MockAppCtrl {
	mock := &MockAppCtrl{ctrl: ctrl}
	mock.recorder = &MockAppCtrlMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppCtrl) EXPECT() *MockAppCtrlMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockAppCtrl) Authenticate(ctx context.Context, d *dto.DeviceRequest, req *dto.EmailAndPasswordRequest) (*dto.TokenPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", ctx, d, req)
	ret0, _ := ret[0].(*dto.TokenPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockAppCtrlMockRecorder) Authenticate(ctx, d, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockAppCtrl)(nil).Authenticate), ctx, d, req)
}

// BeginLogin mocks base method.
func (m *MockAppCtrl) BeginLogin(ctx context.Context, email string) (*protocol.CredentialAssertion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginLogin", ctx, email)
	ret0, _ := ret[0].(*protocol.CredentialAssertion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginLogin indicates an expected call of BeginLogin.
func (mr *MockAppCtrlMockRecorder) BeginLogin(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginLogin", reflect.TypeOf((*MockAppCtrl)(nil).BeginLogin), ctx, email)
}

// CheckForgotPasswordEmail mocks base method.
func (m *MockAppCtrl) CheckForgotPasswordEmail(ctx context.Context, req *dto.CheckForgotPasswordEmailRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckForgotPasswordEmail", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckForgotPasswordEmail indicates an expected call of CheckForgotPasswordEmail.
func (mr *MockAppCtrlMockRecorder) CheckForgotPasswordEmail(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckForgotPasswordEmail", reflect.TypeOf((*MockAppCtrl)(nil).CheckForgotPasswordEmail), ctx, req)
}

// CheckLoginCode mocks base method.
func (m *MockAppCtrl) CheckLoginCode(ctx context.Context, d *dto.DeviceRequest, req *dto.CheckLoginCodeRequest) (*dto.TokenPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckLoginCode", ctx, d, req)
	ret0, _ := ret[0].(*dto.TokenPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckLoginCode indicates an expected call of CheckLoginCode.
func (mr *MockAppCtrlMockRecorder) CheckLoginCode(ctx, d, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckLoginCode", reflect.TypeOf((*MockAppCtrl)(nil).CheckLoginCode), ctx, d, req)
}

// CreatePerm mocks base method.
func (m *MockAppCtrl) CreatePerm(ctx context.Context, req *dto.CreatePermissionRequest) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePerm", ctx, req)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePerm indicates an expected call of CreatePerm.
func (mr *MockAppCtrlMockRecorder) CreatePerm(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePerm", reflect.TypeOf((*MockAppCtrl)(nil).CreatePerm), ctx, req)
}

// CreateRole mocks base method.
func (m *MockAppCtrl) CreateRole(ctx context.Context, req *dto.CreateRoleRequest) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", ctx, req)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockAppCtrlMockRecorder) CreateRole(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockAppCtrl)(nil).CreateRole), ctx, req)
}

// CreateUser mocks base method.
func (m *MockAppCtrl) CreateUser(ctx context.Context, u *dto.CreateUserRequest, file *s3.UploadFileRequest) (*dto.CreateUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, u, file)
	ret0, _ := ret[0].(*dto.CreateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAppCtrlMockRecorder) CreateUser(ctx, u, file any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAppCtrl)(nil).CreateUser), ctx, u, file)
}

// DeleteDevice mocks base method.
func (m *MockAppCtrl) DeleteDevice(ctx context.Context, uid uuid.UUID, dID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDevice", ctx, uid, dID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDevice indicates an expected call of DeleteDevice.
func (mr *MockAppCtrlMockRecorder) DeleteDevice(ctx, uid, dID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDevice", reflect.TypeOf((*MockAppCtrl)(nil).DeleteDevice), ctx, uid, dID)
}

// DeletePerm mocks base method.
func (m *MockAppCtrl) DeletePerm(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePerm", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePerm indicates an expected call of DeletePerm.
func (mr *MockAppCtrlMockRecorder) DeletePerm(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePerm", reflect.TypeOf((*MockAppCtrl)(nil).DeletePerm), ctx, id)
}

// DeleteRole mocks base method.
func (m *MockAppCtrl) DeleteRole(ctx context.Context, uid uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", ctx, uid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *MockAppCtrlMockRecorder) DeleteRole(ctx, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockAppCtrl)(nil).DeleteRole), ctx, uid)
}

// DeleteUser mocks base method.
func (m *MockAppCtrl) DeleteUser(ctx context.Context, userID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockAppCtrlMockRecorder) DeleteUser(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockAppCtrl)(nil).DeleteUser), ctx, userID)
}

// FinishLogin mocks base method.
func (m *MockAppCtrl) FinishLogin(ctx context.Context, email string, d dto.DeviceRequest, r *http.Request) (dto.TokenPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinishLogin", ctx, email, d, r)
	ret0, _ := ret[0].(dto.TokenPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FinishLogin indicates an expected call of FinishLogin.
func (mr *MockAppCtrlMockRecorder) FinishLogin(ctx, email, d, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishLogin", reflect.TypeOf((*MockAppCtrl)(nil).FinishLogin), ctx, email, d, r)
}

// FinishRegistration mocks base method.
func (m *MockAppCtrl) FinishRegistration(ctx context.Context, uid uuid.UUID, r *http.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinishRegistration", ctx, uid, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinishRegistration indicates an expected call of FinishRegistration.
func (mr *MockAppCtrlMockRecorder) FinishRegistration(ctx, uid, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishRegistration", reflect.TypeOf((*MockAppCtrl)(nil).FinishRegistration), ctx, uid, r)
}

// GenPair mocks base method.
func (m *MockAppCtrl) GenPair(ctx context.Context, d *dto.DeviceRequest, uid uuid.UUID, p []models.Role) (dto.TokenPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenPair", ctx, d, uid, p)
	ret0, _ := ret[0].(dto.TokenPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenPair indicates an expected call of GenPair.
func (mr *MockAppCtrlMockRecorder) GenPair(ctx, d, uid, p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenPair", reflect.TypeOf((*MockAppCtrl)(nil).GenPair), ctx, d, uid, p)
}

// GetDevice mocks base method.
func (m *MockAppCtrl) GetDevice(ctx context.Context, uid uuid.UUID, dID string) (*models.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevice", ctx, uid, dID)
	ret0, _ := ret[0].(*models.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevice indicates an expected call of GetDevice.
func (mr *MockAppCtrlMockRecorder) GetDevice(ctx, uid, dID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevice", reflect.TypeOf((*MockAppCtrl)(nil).GetDevice), ctx, uid, dID)
}

// GetDeviceByID mocks base method.
func (m *MockAppCtrl) GetDeviceByID(ctx context.Context, dID string) (*models.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceByID", ctx, dID)
	ret0, _ := ret[0].(*models.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceByID indicates an expected call of GetDeviceByID.
func (mr *MockAppCtrlMockRecorder) GetDeviceByID(ctx, dID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceByID", reflect.TypeOf((*MockAppCtrl)(nil).GetDeviceByID), ctx, dID)
}

// GetOAuth2AuthURL mocks base method.
func (m *MockAppCtrl) GetOAuth2AuthURL(ctx context.Context, provider string) (*dto.StartProviderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOAuth2AuthURL", ctx, provider)
	ret0, _ := ret[0].(*dto.StartProviderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOAuth2AuthURL indicates an expected call of GetOAuth2AuthURL.
func (mr *MockAppCtrlMockRecorder) GetOAuth2AuthURL(ctx, provider any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOAuth2AuthURL", reflect.TypeOf((*MockAppCtrl)(nil).GetOAuth2AuthURL), ctx, provider)
}

// GetOIDCAuthURL mocks base method.
func (m *MockAppCtrl) GetOIDCAuthURL(ctx context.Context, provider string) (*dto.StartProviderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOIDCAuthURL", ctx, provider)
	ret0, _ := ret[0].(*dto.StartProviderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOIDCAuthURL indicates an expected call of GetOIDCAuthURL.
func (mr *MockAppCtrlMockRecorder) GetOIDCAuthURL(ctx, provider any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOIDCAuthURL", reflect.TypeOf((*MockAppCtrl)(nil).GetOIDCAuthURL), ctx, provider)
}

// GetPermission mocks base method.
func (m *MockAppCtrl) GetPermission(ctx context.Context, id uint64) (*models.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermission", ctx, id)
	ret0, _ := ret[0].(*models.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermission indicates an expected call of GetPermission.
func (mr *MockAppCtrlMockRecorder) GetPermission(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermission", reflect.TypeOf((*MockAppCtrl)(nil).GetPermission), ctx, id)
}

// GetRole mocks base method.
func (m *MockAppCtrl) GetRole(ctx context.Context, uid uint64) (*models.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRole", ctx, uid)
	ret0, _ := ret[0].(*models.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRole indicates an expected call of GetRole.
func (mr *MockAppCtrlMockRecorder) GetRole(ctx, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockAppCtrl)(nil).GetRole), ctx, uid)
}

// GetUserByEmail mocks base method.
func (m *MockAppCtrl) GetUserByEmail(ctx context.Context, email string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockAppCtrlMockRecorder) GetUserByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockAppCtrl)(nil).GetUserByEmail), ctx, email)
}

// GetUserByID mocks base method.
func (m *MockAppCtrl) GetUserByID(ctx context.Context, userID uuid.UUID) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, userID)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockAppCtrlMockRecorder) GetUserByID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockAppCtrl)(nil).GetUserByID), ctx, userID)
}

// GetUserForWA mocks base method.
func (m *MockAppCtrl) GetUserForWA(ctx context.Context, uid uuid.UUID, email string) (*models.WebauthnUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserForWA", ctx, uid, email)
	ret0, _ := ret[0].(*models.WebauthnUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserForWA indicates an expected call of GetUserForWA.
func (mr *MockAppCtrlMockRecorder) GetUserForWA(ctx, uid, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserForWA", reflect.TypeOf((*MockAppCtrl)(nil).GetUserForWA), ctx, uid, email)
}

// GetWASession mocks base method.
func (m *MockAppCtrl) GetWASession(ctx context.Context, sessionType webauthn.SessionType, userID uuid.UUID) (*webauthn0.SessionData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWASession", ctx, sessionType, userID)
	ret0, _ := ret[0].(*webauthn0.SessionData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWASession indicates an expected call of GetWASession.
func (mr *MockAppCtrlMockRecorder) GetWASession(ctx, sessionType, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWASession", reflect.TypeOf((*MockAppCtrl)(nil).GetWASession), ctx, sessionType, userID)
}

// HandleOAuth2Callback mocks base method.
func (m *MockAppCtrl) HandleOAuth2Callback(ctx context.Context, d *dto.DeviceRequest, provider, code, state string) (*dto.HandleCallbackResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleOAuth2Callback", ctx, d, provider, code, state)
	ret0, _ := ret[0].(*dto.HandleCallbackResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleOAuth2Callback indicates an expected call of HandleOAuth2Callback.
func (mr *MockAppCtrlMockRecorder) HandleOAuth2Callback(ctx, d, provider, code, state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleOAuth2Callback", reflect.TypeOf((*MockAppCtrl)(nil).HandleOAuth2Callback), ctx, d, provider, code, state)
}

// HandleOIDCCallback mocks base method.
func (m *MockAppCtrl) HandleOIDCCallback(ctx context.Context, d *dto.DeviceRequest, provider, code, state string) (*dto.HandleCallbackResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleOIDCCallback", ctx, d, provider, code, state)
	ret0, _ := ret[0].(*dto.HandleCallbackResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleOIDCCallback indicates an expected call of HandleOIDCCallback.
func (mr *MockAppCtrlMockRecorder) HandleOIDCCallback(ctx, d, provider, code, state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleOIDCCallback", reflect.TypeOf((*MockAppCtrl)(nil).HandleOIDCCallback), ctx, d, provider, code, state)
}

// IsUserExist mocks base method.
func (m *MockAppCtrl) IsUserExist(ctx context.Context, email string) (*dto.ExistsUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserExist", ctx, email)
	ret0, _ := ret[0].(*dto.ExistsUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUserExist indicates an expected call of IsUserExist.
func (mr *MockAppCtrlMockRecorder) IsUserExist(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserExist", reflect.TypeOf((*MockAppCtrl)(nil).IsUserExist), ctx, email)
}

// ListDevices mocks base method.
func (m *MockAppCtrl) ListDevices(ctx context.Context, uid uuid.UUID) ([]models.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDevices", ctx, uid)
	ret0, _ := ret[0].([]models.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDevices indicates an expected call of ListDevices.
func (mr *MockAppCtrlMockRecorder) ListDevices(ctx, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDevices", reflect.TypeOf((*MockAppCtrl)(nil).ListDevices), ctx, uid)
}

// ListPermissions mocks base method.
func (m *MockAppCtrl) ListPermissions(ctx context.Context, page, size int, filters map[string]any) (*dto.PaginatedPermissionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPermissions", ctx, page, size, filters)
	ret0, _ := ret[0].(*dto.PaginatedPermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPermissions indicates an expected call of ListPermissions.
func (mr *MockAppCtrlMockRecorder) ListPermissions(ctx, page, size, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissions", reflect.TypeOf((*MockAppCtrl)(nil).ListPermissions), ctx, page, size, filters)
}

// ListRoles mocks base method.
func (m *MockAppCtrl) ListRoles(ctx context.Context, page, size int, filters map[string]any) (*dto.PaginatedRoleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoles", ctx, page, size, filters)
	ret0, _ := ret[0].(*dto.PaginatedRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoles indicates an expected call of ListRoles.
func (mr *MockAppCtrlMockRecorder) ListRoles(ctx, page, size, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoles", reflect.TypeOf((*MockAppCtrl)(nil).ListRoles), ctx, page, size, filters)
}

// ListUsers mocks base method.
func (m *MockAppCtrl) ListUsers(ctx context.Context, page, size int, filters map[string]any) (*dto.PaginatedUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", ctx, page, size, filters)
	ret0, _ := ret[0].(*dto.PaginatedUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockAppCtrlMockRecorder) ListUsers(ctx, page, size, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockAppCtrl)(nil).ListUsers), ctx, page, size, filters)
}

// Logout mocks base method.
func (m *MockAppCtrl) Logout(ctx context.Context, uid uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", ctx, uid)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockAppCtrlMockRecorder) Logout(ctx, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockAppCtrl)(nil).Logout), ctx, uid)
}

// ParseClaims mocks base method.
func (m *MockAppCtrl) ParseClaims(ctx context.Context, token string) (jwt.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseClaims", ctx, token)
	ret0, _ := ret[0].(jwt.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseClaims indicates an expected call of ParseClaims.
func (mr *MockAppCtrlMockRecorder) ParseClaims(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseClaims", reflect.TypeOf((*MockAppCtrl)(nil).ParseClaims), ctx, token)
}

// Refresh mocks base method.
func (m *MockAppCtrl) Refresh(ctx context.Context, d *dto.DeviceRequest, req *dto.RefreshRequest) (*dto.TokenPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh", ctx, d, req)
	ret0, _ := ret[0].(*dto.TokenPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Refresh indicates an expected call of Refresh.
func (mr *MockAppCtrlMockRecorder) Refresh(ctx, d, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockAppCtrl)(nil).Refresh), ctx, d, req)
}

// SendForgotPasswordEmail mocks base method.
func (m *MockAppCtrl) SendForgotPasswordEmail(ctx context.Context, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendForgotPasswordEmail", ctx, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendForgotPasswordEmail indicates an expected call of SendForgotPasswordEmail.
func (mr *MockAppCtrlMockRecorder) SendForgotPasswordEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendForgotPasswordEmail", reflect.TypeOf((*MockAppCtrl)(nil).SendForgotPasswordEmail), ctx, email)
}

// SendLoginCode mocks base method.
func (m *MockAppCtrl) SendLoginCode(ctx context.Context, d *dto.DeviceRequest, email, password string) (dto.TokenPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendLoginCode", ctx, d, email, password)
	ret0, _ := ret[0].(dto.TokenPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendLoginCode indicates an expected call of SendLoginCode.
func (mr *MockAppCtrlMockRecorder) SendLoginCode(ctx, d, email, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendLoginCode", reflect.TypeOf((*MockAppCtrl)(nil).SendLoginCode), ctx, d, email, password)
}

// StartRegistration mocks base method.
func (m *MockAppCtrl) StartRegistration(ctx context.Context, uid uuid.UUID) (*protocol.CredentialCreation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartRegistration", ctx, uid)
	ret0, _ := ret[0].(*protocol.CredentialCreation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartRegistration indicates an expected call of StartRegistration.
func (mr *MockAppCtrlMockRecorder) StartRegistration(ctx, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartRegistration", reflect.TypeOf((*MockAppCtrl)(nil).StartRegistration), ctx, uid)
}

// StoreWASession mocks base method.
func (m *MockAppCtrl) StoreWASession(ctx context.Context, sessionType webauthn.SessionType, userID uuid.UUID, req *webauthn0.SessionData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreWASession", ctx, sessionType, userID, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreWASession indicates an expected call of StoreWASession.
func (mr *MockAppCtrlMockRecorder) StoreWASession(ctx, sessionType, userID, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreWASession", reflect.TypeOf((*MockAppCtrl)(nil).StoreWASession), ctx, sessionType, userID, req)
}

// UpdateDevice mocks base method.
func (m *MockAppCtrl) UpdateDevice(ctx context.Context, uid uuid.UUID, dID string, req *dto.UpdateDeviceRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDevice", ctx, uid, dID, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDevice indicates an expected call of UpdateDevice.
func (mr *MockAppCtrlMockRecorder) UpdateDevice(ctx, uid, dID, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDevice", reflect.TypeOf((*MockAppCtrl)(nil).UpdateDevice), ctx, uid, dID, req)
}

// UpdateMe mocks base method.
func (m *MockAppCtrl) UpdateMe(ctx context.Context, id uuid.UUID, req *dto.UpdateUserRequest, file *s3.UploadFileRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMe", ctx, id, req, file)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMe indicates an expected call of UpdateMe.
func (mr *MockAppCtrlMockRecorder) UpdateMe(ctx, id, req, file any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMe", reflect.TypeOf((*MockAppCtrl)(nil).UpdateMe), ctx, id, req, file)
}

// UpdatePerm mocks base method.
func (m *MockAppCtrl) UpdatePerm(ctx context.Context, id uint64, req *dto.UpdatePermissionRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePerm", ctx, id, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePerm indicates an expected call of UpdatePerm.
func (mr *MockAppCtrlMockRecorder) UpdatePerm(ctx, id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePerm", reflect.TypeOf((*MockAppCtrl)(nil).UpdatePerm), ctx, id, req)
}

// UpdateRole mocks base method.
func (m *MockAppCtrl) UpdateRole(ctx context.Context, uid uint64, req *dto.UpdateRoleRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRole", ctx, uid, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRole indicates an expected call of UpdateRole.
func (mr *MockAppCtrlMockRecorder) UpdateRole(ctx, uid, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockAppCtrl)(nil).UpdateRole), ctx, uid, req)
}

// UpdateUser mocks base method.
func (m *MockAppCtrl) UpdateUser(ctx context.Context, id uuid.UUID, req *dto.UpdateUserRequest, file *s3.UploadFileRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, id, req, file)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockAppCtrlMockRecorder) UpdateUser(ctx, id, req, file any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockAppCtrl)(nil).UpdateUser), ctx, id, req, file)
}

// MockS3Service is a mock of S3Service interface.
type MockS3Service struct {
	ctrl     *gomock.Controller
	recorder *MockS3ServiceMockRecorder
	isgomock struct{}
}

// MockS3ServiceMockRecorder is the mock recorder for MockS3Service.
type MockS3ServiceMockRecorder struct {
	mock *MockS3Service
}

// NewMockS3Service creates a new mock instance.
func NewMockS3Service(ctrl *gomock.Controller) *MockS3Service {
	mock := &MockS3Service{ctrl: ctrl}
	mock.recorder = &MockS3ServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockS3Service) EXPECT() *MockS3ServiceMockRecorder {
	return m.recorder
}

// UploadFile mocks base method.
func (m *MockS3Service) UploadFile(ctx context.Context, req *s3.UploadFileRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", ctx, req)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockS3ServiceMockRecorder) UploadFile(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockS3Service)(nil).UploadFile), ctx, req)
}

// MockCacheService is a mock of CacheService interface.
type MockCacheService struct {
	ctrl     *gomock.Controller
	recorder *MockCacheServiceMockRecorder
	isgomock struct{}
}

// MockCacheServiceMockRecorder is the mock recorder for MockCacheService.
type MockCacheServiceMockRecorder struct {
	mock *MockCacheService
}

// NewMockCacheService creates a new mock instance.
func NewMockCacheService(ctrl *gomock.Controller) *MockCacheService {
	mock := &MockCacheService{ctrl: ctrl}
	mock.recorder = &MockCacheServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheService) EXPECT() *MockCacheServiceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockCacheService) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockCacheServiceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCacheService)(nil).Close))
}

// Delete mocks base method.
func (m *MockCacheService) Delete(ctx context.Context, key string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", ctx, key)
}

// Delete indicates an expected call of Delete.
func (mr *MockCacheServiceMockRecorder) Delete(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCacheService)(nil).Delete), ctx, key)
}

// GetInt mocks base method.
func (m *MockCacheService) GetInt(ctx context.Context, key string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInt", ctx, key)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInt indicates an expected call of GetInt.
func (mr *MockCacheServiceMockRecorder) GetInt(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInt", reflect.TypeOf((*MockCacheService)(nil).GetInt), ctx, key)
}

// GetStr mocks base method.
func (m *MockCacheService) GetStr(ctx context.Context, key string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStr", ctx, key)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetStr indicates an expected call of GetStr.
func (mr *MockCacheServiceMockRecorder) GetStr(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStr", reflect.TypeOf((*MockCacheService)(nil).GetStr), ctx, key)
}

// GetToStruct mocks base method.
func (m *MockCacheService) GetToStruct(ctx context.Context, key string, dest any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToStruct", ctx, key, dest)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetToStruct indicates an expected call of GetToStruct.
func (mr *MockCacheServiceMockRecorder) GetToStruct(ctx, key, dest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToStruct", reflect.TypeOf((*MockCacheService)(nil).GetToStruct), ctx, key, dest)
}

// InvalidateKeysByPattern mocks base method.
func (m *MockCacheService) InvalidateKeysByPattern(ctx context.Context, pattern string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InvalidateKeysByPattern", ctx, pattern)
}

// InvalidateKeysByPattern indicates an expected call of InvalidateKeysByPattern.
func (mr *MockCacheServiceMockRecorder) InvalidateKeysByPattern(ctx, pattern any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateKeysByPattern", reflect.TypeOf((*MockCacheService)(nil).InvalidateKeysByPattern), ctx, pattern)
}

// Set mocks base method.
func (m *MockCacheService) Set(ctx context.Context, t time.Duration, key string, val any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", ctx, t, key, val)
}

// Set indicates an expected call of Set.
func (mr *MockCacheServiceMockRecorder) Set(ctx, t, key, val any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCacheService)(nil).Set), ctx, t, key, val)
}

// MockEmailService is a mock of EmailService interface.
type MockEmailService struct {
	ctrl     *gomock.Controller
	recorder *MockEmailServiceMockRecorder
	isgomock struct{}
}

// MockEmailServiceMockRecorder is the mock recorder for MockEmailService.
type MockEmailServiceMockRecorder struct {
	mock *MockEmailService
}

// NewMockEmailService creates a new mock instance.
func NewMockEmailService(ctrl *gomock.Controller) *MockEmailService {
	mock := &MockEmailService{ctrl: ctrl}
	mock.recorder = &MockEmailServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailService) EXPECT() *MockEmailServiceMockRecorder {
	return m.recorder
}

// SendForgotPasswordEmail mocks base method.
func (m *MockEmailService) SendForgotPasswordEmail(ctx context.Context, token, uid64, toEmail string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendForgotPasswordEmail", ctx, token, uid64, toEmail)
}

// SendForgotPasswordEmail indicates an expected call of SendForgotPasswordEmail.
func (mr *MockEmailServiceMockRecorder) SendForgotPasswordEmail(ctx, token, uid64, toEmail any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendForgotPasswordEmail", reflect.TypeOf((*MockEmailService)(nil).SendForgotPasswordEmail), ctx, token, uid64, toEmail)
}

// SendLoginEmail mocks base method.
func (m *MockEmailService) SendLoginEmail(arg0 context.Context, code int, toEmail string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendLoginEmail", arg0, code, toEmail)
}

// SendLoginEmail indicates an expected call of SendLoginEmail.
func (mr *MockEmailServiceMockRecorder) SendLoginEmail(arg0, code, toEmail any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendLoginEmail", reflect.TypeOf((*MockEmailService)(nil).SendLoginEmail), arg0, code, toEmail)
}

// SendUserCredentials mocks base method.
func (m *MockEmailService) SendUserCredentials(arg0 context.Context, email, pass string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendUserCredentials", arg0, email, pass)
}

// SendUserCredentials indicates an expected call of SendUserCredentials.
func (mr *MockEmailServiceMockRecorder) SendUserCredentials(arg0, email, pass any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendUserCredentials", reflect.TypeOf((*MockEmailService)(nil).SendUserCredentials), arg0, email, pass)
}
