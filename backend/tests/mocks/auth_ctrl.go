// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/auth/auth.go
//
// Generated by this command:
//
//	mockgen -source=./internal/auth/auth.go -destination=tests/mocks/auth_ctrl.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	http "net/http"
	reflect "reflect"
	time "time"

	captcha "github.com/JMURv/sso/internal/auth/captcha"
	jwt "github.com/JMURv/sso/internal/auth/jwt"
	providers "github.com/JMURv/sso/internal/auth/providers"
	models "github.com/JMURv/sso/internal/models"
	protocol "github.com/go-webauthn/webauthn/protocol"
	webauthn "github.com/go-webauthn/webauthn/webauthn"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockCore is a mock of Core interface.
type MockCore struct {
	ctrl     *gomock.Controller
	recorder *MockCoreMockRecorder
	isgomock struct{}
}

// MockCoreMockRecorder is the mock recorder for MockCore.
type MockCoreMockRecorder struct {
	mock *MockCore
}

// NewMockCore creates a new mock instance.
func NewMockCore(ctrl *gomock.Controller) *MockCore {
	mock := &MockCore{ctrl: ctrl}
	mock.recorder = &MockCoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCore) EXPECT() *MockCoreMockRecorder {
	return m.recorder
}

// BeginLogin mocks base method.
func (m *MockCore) BeginLogin(user webauthn.User, opts ...webauthn.LoginOption) (*protocol.CredentialAssertion, *webauthn.SessionData, error) {
	m.ctrl.T.Helper()
	varargs := []any{user}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BeginLogin", varargs...)
	ret0, _ := ret[0].(*protocol.CredentialAssertion)
	ret1, _ := ret[1].(*webauthn.SessionData)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// BeginLogin indicates an expected call of BeginLogin.
func (mr *MockCoreMockRecorder) BeginLogin(user any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{user}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginLogin", reflect.TypeOf((*MockCore)(nil).BeginLogin), varargs...)
}

// BeginRegistration mocks base method.
func (m *MockCore) BeginRegistration(user webauthn.User, opts ...webauthn.RegistrationOption) (*protocol.CredentialCreation, *webauthn.SessionData, error) {
	m.ctrl.T.Helper()
	varargs := []any{user}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BeginRegistration", varargs...)
	ret0, _ := ret[0].(*protocol.CredentialCreation)
	ret1, _ := ret[1].(*webauthn.SessionData)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// BeginRegistration indicates an expected call of BeginRegistration.
func (mr *MockCoreMockRecorder) BeginRegistration(user any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{user}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginRegistration", reflect.TypeOf((*MockCore)(nil).BeginRegistration), varargs...)
}

// ComparePasswords mocks base method.
func (m *MockCore) ComparePasswords(hashed, pswd []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComparePasswords", hashed, pswd)
	ret0, _ := ret[0].(error)
	return ret0
}

// ComparePasswords indicates an expected call of ComparePasswords.
func (mr *MockCoreMockRecorder) ComparePasswords(hashed, pswd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComparePasswords", reflect.TypeOf((*MockCore)(nil).ComparePasswords), hashed, pswd)
}

// FinishLogin mocks base method.
func (m *MockCore) FinishLogin(user webauthn.User, session webauthn.SessionData, response *http.Request) (*webauthn.Credential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinishLogin", user, session, response)
	ret0, _ := ret[0].(*webauthn.Credential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FinishLogin indicates an expected call of FinishLogin.
func (mr *MockCoreMockRecorder) FinishLogin(user, session, response any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishLogin", reflect.TypeOf((*MockCore)(nil).FinishLogin), user, session, response)
}

// FinishRegistration mocks base method.
func (m *MockCore) FinishRegistration(user webauthn.User, session webauthn.SessionData, response *http.Request) (*webauthn.Credential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinishRegistration", user, session, response)
	ret0, _ := ret[0].(*webauthn.Credential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FinishRegistration indicates an expected call of FinishRegistration.
func (mr *MockCoreMockRecorder) FinishRegistration(user, session, response any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishRegistration", reflect.TypeOf((*MockCore)(nil).FinishRegistration), user, session, response)
}

// GenPair mocks base method.
func (m *MockCore) GenPair(ctx context.Context, uid uuid.UUID, roles []models.Role) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenPair", ctx, uid, roles)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenPair indicates an expected call of GenPair.
func (mr *MockCoreMockRecorder) GenPair(ctx, uid, roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenPair", reflect.TypeOf((*MockCore)(nil).GenPair), ctx, uid, roles)
}

// GenerateSignedState mocks base method.
func (m *MockCore) GenerateSignedState() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateSignedState")
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateSignedState indicates an expected call of GenerateSignedState.
func (mr *MockCoreMockRecorder) GenerateSignedState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateSignedState", reflect.TypeOf((*MockCore)(nil).GenerateSignedState))
}

// Get mocks base method.
func (m *MockCore) Get(provider providers.Providers, flow providers.Flow) (providers.OAuthProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", provider, flow)
	ret0, _ := ret[0].(providers.OAuthProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCoreMockRecorder) Get(provider, flow any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCore)(nil).Get), provider, flow)
}

// GetAccessTime mocks base method.
func (m *MockCore) GetAccessTime() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetAccessTime indicates an expected call of GetAccessTime.
func (mr *MockCoreMockRecorder) GetAccessTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessTime", reflect.TypeOf((*MockCore)(nil).GetAccessTime))
}

// GetRefreshTime mocks base method.
func (m *MockCore) GetRefreshTime() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefreshTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetRefreshTime indicates an expected call of GetRefreshTime.
func (mr *MockCoreMockRecorder) GetRefreshTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefreshTime", reflect.TypeOf((*MockCore)(nil).GetRefreshTime))
}

// Hash mocks base method.
func (m *MockCore) Hash(val string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash", val)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hash indicates an expected call of Hash.
func (mr *MockCoreMockRecorder) Hash(val any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockCore)(nil).Hash), val)
}

// NewToken mocks base method.
func (m *MockCore) NewToken(ctx context.Context, uid uuid.UUID, roles []models.Role, d time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewToken", ctx, uid, roles, d)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewToken indicates an expected call of NewToken.
func (mr *MockCoreMockRecorder) NewToken(ctx, uid, roles, d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewToken", reflect.TypeOf((*MockCore)(nil).NewToken), ctx, uid, roles, d)
}

// ParseClaims mocks base method.
func (m *MockCore) ParseClaims(ctx context.Context, tokenStr string) (jwt.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseClaims", ctx, tokenStr)
	ret0, _ := ret[0].(jwt.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseClaims indicates an expected call of ParseClaims.
func (mr *MockCoreMockRecorder) ParseClaims(ctx, tokenStr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseClaims", reflect.TypeOf((*MockCore)(nil).ParseClaims), ctx, tokenStr)
}

// SuccessURL mocks base method.
func (m *MockCore) SuccessURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SuccessURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// SuccessURL indicates an expected call of SuccessURL.
func (mr *MockCoreMockRecorder) SuccessURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuccessURL", reflect.TypeOf((*MockCore)(nil).SuccessURL))
}

// ValidateSignedState mocks base method.
func (m *MockCore) ValidateSignedState(signedState string, maxAge time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateSignedState", signedState, maxAge)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateSignedState indicates an expected call of ValidateSignedState.
func (mr *MockCoreMockRecorder) ValidateSignedState(signedState, maxAge any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateSignedState", reflect.TypeOf((*MockCore)(nil).ValidateSignedState), signedState, maxAge)
}

// VerifyRecaptcha mocks base method.
func (m *MockCore) VerifyRecaptcha(token string, action captcha.Actions) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyRecaptcha", token, action)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyRecaptcha indicates an expected call of VerifyRecaptcha.
func (mr *MockCoreMockRecorder) VerifyRecaptcha(token, action any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyRecaptcha", reflect.TypeOf((*MockCore)(nil).VerifyRecaptcha), token, action)
}
